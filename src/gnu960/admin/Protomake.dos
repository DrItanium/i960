
G960BASE= $(G960ROOT)\dos
HOST	= dos
MFILE	= makefile.dos
SNAPSHOT=
SLASH=\\
DOSXP          = c:\tnt
DOSXN          = $(DOSXP)\bin\gotnt.exe
.RESPONSE.make make pre=@ suf=.rsp
.OPUS_52X : twopass

# Build a single tool or library.  "Subroutine" target, not to be invoked
# directly.  "Arguments" passed in:
#	DIR	Name of src subdirectory
#	HOST	Name of host
#	CLEAN	"clean" cleans before/after building; "" skips cleaning
#	FMT	"" for tools;  "_bout", "_coff" or "_cfbe" for libs
#
# Note that two environment variables are set in the invocation of the lower-
# level makefile (G960BASE and PATH) so the GNU tools (hopefully already built)
# can be used in building the libraries.  The other G960 environment variables
# are turned off so they don't over-ride G960BASE.  G960BASE is also passed as
# a make macro so the lower-level makefile can know where to install the tools
# or libraries it builds.
# 
tool:
	@echo "=============== $(DIR): install$(FMT) ==============="
	%if "$(CLEAN)" != "" 
		( cd src\$(DIR)\$(HOST) ; make $(CLEAN) )
	%endif
	%setenv G960BASE=$(G960BASE)
	%setenv G960ROOT=$(G960ROOT)
	%setenv G960BIN=
	%setenv G960LIB=
	%setenv G960INC=
	%setenv G960AS=
	%setenv G960CPP=
	%setenv G960CC1=
	( cd src\$(DIR)\$(HOST) \
		; make SNAPSHOT=$(SNAPSHOT) install$(FMT) $(CLEAN) DOSXP=$(DOSXP) DOSXN=$(DOSXN) )

clean:
	!foreach T $(TOOLS)
		@echo  =============== $T ===============
		( cd src\$T\dos ; make clean )
	!end
	!foreach L $(LIBS)
		@echo  =============== lib\$L ===============
		( cd src\lib\$L\$(LIB_BUILD) ; make clean )
	!end

