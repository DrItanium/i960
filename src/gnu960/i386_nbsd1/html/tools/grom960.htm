<HTML>

<HEAD>

<TITLE>ROM Image Generator (grom960)</TITLE>

<META NAME="AUTHOR" CONTENT="David M. Gaffney">
<META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z Beta">
</HEAD>

<BODY>

<H1>
<CENTER>
grom960 ROM Image Generator 
</CENTER>
</H1>

<HR>

<P>
grom960 extracts the text (executable code) and data sections
from one or more object files, places them in specified locations
in a binary image, and converts the binary image into one or more
files in Intel hex format. The resulting files can be downloaded
to a PROM programming device. grom960 also provides options that
allow bytes from the binary image to be interleaved into multiple
banks of PROMs.
<P>
The invocation command is:
<P>
<TT><B><FONT SIZE=4 FACE="Courier New">grom960</FONT></B><FONT SIZE=4 FACE="Courier New">
[ <B>-</B><I>option</I> ]... <I>section_spec</I>... </FONT></TT>
<P>
<A NAME="DDE_LINK2">Each option must be preceded by a </A><TT><B><FONT SIZE=4 FACE="Courier New">-</FONT></B></TT>
character. (On DOS, you can also use a <TT><B><FONT SIZE=4 FACE="Courier New">/</FONT></B></TT>
character.) The options are listed below. 
<P>
A <TT><I><FONT SIZE=4 FACE="Courier New">section_spec</FONT></I></TT>
specifies the placement of a text or data section into the binary
image. Multiple specifications are allowed; they are processed
in the order encountered. There are four types, listed below.
<HR>

<H2>Section Specifications </H2>

<HR>

<UL>
<LI><TT><I><FONT SIZE=4 FACE="Courier New">filename</FONT></I><FONT SIZE=4 FACE="Courier New">[<B>,</B><I>addr</I>]
<BR>
</FONT></TT>Places the text section of the specified file at address
<TT><I><FONT SIZE=4 FACE="Courier New">addr</FONT></I></TT>, relative
to the start of the image, and places the data section immediately
following the text section.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">B</FONT></B><I><FONT SIZE=4 FACE="Courier New">filename</FONT></I><FONT SIZE=4 FACE="Courier New">[<B>,</B><I>addr</I>]
<BR>
</FONT></TT>Also places both the text and data sections of the
specified file at address <TT><I><FONT SIZE=4 FACE="Courier New">addr</FONT></I></TT>,
relative to the start of the image. However, the order of the
text and data sections will be the same as in the input file (i.e.,
the one linked at the lower address will come first); and any
gap between the sections will be preserved in the output image.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">D</FONT></B><I><FONT SIZE=4 FACE="Courier New">filename</FONT></I><FONT SIZE=4 FACE="Courier New">[<B>,</B><I>addr</I>]
<BR>
</FONT></TT>Places the data section of the specified file at address
<TT><I><FONT SIZE=4 FACE="Courier New">addr</FONT></I></TT>.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">T</FONT></B><I><FONT SIZE=4 FACE="Courier New">filename</FONT></I><FONT SIZE=4 FACE="Courier New">[<B>,</B><I>addr</I>]
<BR>
</FONT></TT>Places the text section of the specified file at address
<TT><I><FONT SIZE=4 FACE="Courier New">addr</FONT></I></TT>. 
</UL>

<P>
The <TT><I><FONT SIZE=4 FACE="Courier New">addr</FONT></I></TT>
argument is always optional. An omitted address causes the specified
section(s) to be placed immediately after the one in the preceding
specification (or at address 0 in the binary image, in the case
of the first section specification).
<HR>

<H2>Options </H2>

<HR>

<P>
Numeric arguments are interpreted as decimal, unless preceded
by <TT><B><FONT SIZE=4 FACE="Courier New">0x</FONT></B></TT> (hex).
<UL>
<LI><TT><B><FONT SIZE=4 FACE="Courier New">20</FONT></B><FONT SIZE=4 FACE="Courier New">
<BR>
</FONT></TT>If the ROM is more than 64K long, generates extended
address records in 20-bit format (e.g., as used by the 8086).
The default is to generate 32-bit format records. This option
is included primarily for compatibility with old ROM burner software
that does not understand 32-bit format.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">A</FONT></B><I><FONT SIZE=4 FACE="Courier New">n
<BR>
</FONT></I></TT>Sets checksum storage address to <TT><I><FONT SIZE=4 FACE="Courier New">n</FONT></I></TT>.
Default = <TT><B><FONT SIZE=4 FACE="Courier New">0x10000</FONT></B></TT>.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">b</FONT></B><I><FONT SIZE=4 FACE="Courier New">n
<BR>
</FONT></I></TT>Generates images for <TT><I><FONT SIZE=4 FACE="Courier New">n</FONT></I></TT><I>
</I>banks of ROMs. Default = <TT><B><FONT SIZE=4 FACE="Courier New">1</FONT></B></TT>.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">c </FONT></B><FONT SIZE=4 FACE="Courier New">{<B>
16</B> | <B>32</B> }<BR>
</FONT></TT>Generates a 16-bit or 32-bit checksum.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">E</FONT></B><I><FONT SIZE=4 FACE="Courier New">n</FONT></I><FONT SIZE=4 FACE="Courier New">
<BR>
</FONT></TT>Sets checksum end address to <TT><I><FONT SIZE=4 FACE="Courier New">n</FONT></I></TT>.
Default = <TT><B><FONT SIZE=4 FACE="Courier New">0xffff</FONT></B></TT>.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">f</FONT></B><FONT SIZE=4 FACE="Courier New">
<BR>
</FONT></TT>Dumps full image and does not skip all ones records.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">h</FONT></B><FONT SIZE=4 FACE="Courier New">
<BR>
</FONT></TT>Gives a help message and quits.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">i<BR>
</FONT></B></TT>Suppresses generating hex output files. Instead,
dump the raw binary image to output file <TT><B><FONT SIZE=4 FACE="Courier New">image</FONT></B></TT>.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">l</FONT></B><I><FONT SIZE=4 FACE="Courier New">n</FONT></I><FONT SIZE=4 FACE="Courier New">
<BR>
</FONT></TT>Generates images for ROMs that are <TT><I><FONT SIZE=4 FACE="Courier New">n</FONT></I></TT>
bytes long. The default is 0x10000 (64K).
<LI><TT><B><FONT SIZE=4 FACE="Courier New">m <BR>
</FONT></B></TT>Writes a map of the binary image to <TT><B><FONT SIZE=4 FACE="Courier New">stdout</FONT></B><I><FONT SIZE=4 FACE="Courier New">.</FONT></I></TT>

<LI><TT><B><FONT SIZE=4 FACE="Courier New">o</FONT></B><I><FONT SIZE=4 FACE="Courier New">name</FONT></I><FONT SIZE=4 FACE="Courier New">
<BR>
</FONT></TT>Specifies the base name of the output file(s). If
the <TT><B><FONT SIZE=4 FACE="Courier New">i</FONT></B></TT> option
is used, the output file name will contain the binary image. (Default
filename is <TT><B><FONT SIZE=4 FACE="Courier New">image</FONT></B></TT>.)
If the <TT><B><FONT SIZE=4 FACE="Courier New">i</FONT></B></TT>
option is not used, a series of files name <TT><I><FONT SIZE=4 FACE="Courier New">namexy</FONT></I><B><FONT SIZE=4 FACE="Courier New">.hex</FONT></B></TT>
will contain the hex ROM images. (Default is a series of files
named <TT><B><FONT SIZE=4 FACE="Courier New">rom</FONT></B><I><FONT SIZE=4 FACE="Courier New">xy</FONT></I><B><FONT SIZE=4 FACE="Courier New">.hex</FONT></B></TT>.)
<LI><TT><B><FONT SIZE=4 FACE="Courier New">S</FONT></B><I><FONT SIZE=4 FACE="Courier New">n</FONT></I><B><FONT SIZE=4 FACE="Courier New">
<BR>
</FONT></B></TT>Set checksum start address to <TT><I><FONT SIZE=4 FACE="Courier New">n</FONT></I></TT>.
Default is <TT><B><FONT SIZE=4 FACE="Courier New">0x0</FONT></B></TT>.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">V</FONT></B><FONT SIZE=4 FACE="Courier New">
<BR>
</FONT></TT>Print version and continue.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">v</FONT></B><FONT SIZE=4 FACE="Courier New">
<BR>
</FONT></TT>Produces a map, as with the <TT><B><FONT SIZE=4 FACE="Courier New">m</FONT></B></TT><B>
</B>option, and summarizes the ROM configuration settings.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">v960</FONT></B><FONT SIZE=4 FACE="Courier New">
<BR>
</FONT></TT>Writes grom960 version information to <TT><B><FONT SIZE=4 FACE="Courier New">stdout</FONT></B></TT>
and quits.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">w</FONT></B><I><FONT SIZE=4 FACE="Courier New">n<I><B>
<BR>
</B></I></FONT></I></TT>Generates ROMs that are <TT><I><FONT SIZE=4 FACE="Courier New">n</FONT></I></TT>
bytes &quot;wide&quot;. (Default is 1.) <TT><I><FONT SIZE=4 FACE="Courier New">n</FONT></I></TT>
bytes at a time are written from the binary image to each bank
of ROM, before moving on to the next ROM bank. The combination
of the <TT><B><FONT SIZE=4 FACE="Courier New">b</FONT></B></TT>
and <TT><B><FONT SIZE=4 FACE="Courier New">w</FONT></B></TT> options
controls interleaving of ROMs. 
</UL>

<HR>

<H2>Using grom960 </H2>

<HR>

<P>
Generating ROM images is a two-step process: creation of a binary
image, and conversion of the image to ROM image (Intel hex) files.
<H3>Generating Binary Images </H3>

<P>
Regardless of the addresses where the code was linked, all bytes
in a ROM image appear in a contiguous address space relative to
the ROMs' base address. For instance, a 64K ROM based at address
<TT><B><FONT SIZE=4 FACE="Courier New">0xffff0000</FONT></B></TT>
has a ROM address space of <TT><B><FONT SIZE=4 FACE="Courier New">[0,0xffff]</FONT></B></TT>,
byte 0 of the ROM being the byte which will be addressed at <TT><B><FONT SIZE=4 FACE="Courier New">0xffff0000</FONT></B></TT>
at run time.
<P>
The binary image is generated by extracting the text and data
sections of the input files and placing them at the specified
locations in the ROM address space. Unused address space bytes
are initialized to <TT><B><FONT SIZE=4 FACE="Courier New">0xff</FONT></B></TT>,
the value of a byte in an erased PROM.
<H3>Hex File Generation </H3>

<P>
After a single binary image has been created, it is interleaved
according to the ROM width and the number of banks requested.
If the width is <TT><I><B><FONT SIZE=4 FACE="Courier New">w</FONT></B></I></TT>,
and the number of banks is <TT><I><B><FONT SIZE=4 FACE="Courier New">b</FONT></B></I></TT>,
the first <TT><I><B><FONT SIZE=4 FACE="Courier New">w</FONT></B></I></TT>
bytes in the image are written to the first bank of ROMs, then
the second <TT><I><B><FONT SIZE=4 FACE="Courier New">w</FONT></B></I></TT>
bytes are written to the second bank, and so on. After <TT><I><B><FONT SIZE=4 FACE="Courier New">b</FONT></B></I></TT>th
bank has been written, output resumes at the first bank. For example,
if the number of banks is four, the ROM width is two, and the
first sixteen bytes of the image are:
<P>
<TT><B><FONT SIZE=4 FACE="Courier New">0x00112233445566778899aabbccddeeff</FONT></B></TT>

<P>
then the four banks would begin with the following values:
<P>
bank 0: <TT><B><FONT SIZE=4 FACE="Courier New">0x00118899...</FONT></B></TT>

<P>
bank 1: <TT><B><FONT SIZE=4 FACE="Courier New">0x2233aabb...</FONT></B></TT>

<P>
bank 2: <TT><B><FONT SIZE=4 FACE="Courier New">0x4455ccdd...</FONT></B></TT>

<P>
bank 3: <TT><B><FONT SIZE=4 FACE="Courier New">0x6677eeff...</FONT></B></TT>

<P>
Each bank corresponds to at least one ROM. Every time the amount
of data written to a bank exceeds the specified ROM length, a
new ROM image file is started.
<P>
Each output file is in Intel hex format and corresponds to a single
ROM device. The output files are named <TT><I><FONT SIZE=4 FACE="Courier New">basenamexy</FONT></I><B><FONT SIZE=4 FACE="Courier New">.hex</FONT></B></TT>,
where <TT><I><FONT SIZE=4 FACE="Courier New">y</FONT></I></TT>
is the bank number and <TT><I><FONT SIZE=4 FACE="Courier New">x</FONT></I></TT>
is the sequence number within the bank. Both <TT><I><FONT SIZE=4 FACE="Courier New">x</FONT></I></TT>
and <TT><I><FONT SIZE=4 FACE="Courier New">y</FONT></I></TT> are
numbered from 0. For example, if the number of banks is four,
the ROM length is 64 K, and the total image size is 512K, then
the following hex files would be output:
<P>
bank 0: <TT><B><FONT SIZE=4 FACE="Courier New">rom00.hex</FONT></B></TT>,
<TT><B><FONT SIZE=4 FACE="Courier New">rom10.hex</FONT></B></TT>

<P>
bank 1: <TT><B><FONT SIZE=4 FACE="Courier New">rom01.hex</FONT></B></TT>,
<TT><B><FONT SIZE=4 FACE="Courier New">rom11.hex</FONT></B></TT>

<P>
bank 2: <TT><B><FONT SIZE=4 FACE="Courier New">rom02.hex</FONT></B></TT>,
<TT><B><FONT SIZE=4 FACE="Courier New">rom12.hex</FONT></B></TT>

<P>
bank 3: <TT><B><FONT SIZE=4 FACE="Courier New">rom 03.hex</FONT></B></TT>,
<TT><B><FONT SIZE=4 FACE="Courier New">rom13.hex</FONT></B></TT>.
<HR>

<P>
<A HREF="#top"><IMG SRC="../icons/uparw.gif" ALIGN="BOTTOM"></A><I>Return
to the top of this page.</I> 
<P>
<A HREF="ctoolshm.htm"><IMG SRC="../icons/index2.gif" ALIGN="BOTTOM"></A><I>Go
to the ic960 Interface Index.</I> 
<P>
<A HREF="gnuhome.htm"><IMG SRC="../icons/index2.gif" ALIGN="BOTTOM"></A><I>Go
to the gcc960 Interface Index.</I> 
</BODY>

</HTML>

