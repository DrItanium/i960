<HTML>

<HEAD>

<TITLE>ROM Image Builder (rom960)</TITLE>

<META NAME="AUTHOR" CONTENT="David M. Gaffney">
<META NAME="GENERATOR" CONTENT="Internet Assistant for Microsoft Word 2.0z Beta">
</HEAD>

<BODY>

<H1>
<CENTER>
rom960 ROM Image Builder 
</CENTER>
</H1>

<HR>

<P>
The rom960 ROM image builder interprets commands either from a
configuration file or from standard input. The invocation command
is:
<P>
<TT><B><FONT SIZE=4 FACE="Courier New">rom960 </FONT></B><FONT SIZE=4 FACE="Courier New">[
<B>-</B><I>option</I> ]... [ <I>config_file</I> [ <I>script-arg</I>
]...]... </FONT></TT>
<P>
Each option must be preceded by a <TT><B><FONT SIZE=4 FACE="Courier New">-</FONT></B></TT>
character. (On DOS, you can also use a <TT><B><FONT SIZE=4 FACE="Courier New">/</FONT></B></TT>
character.) The options are listed below.
<P>
A configuration file must be given without its <TT><B><FONT SIZE=4 FACE="Courier New">.ld</FONT></B></TT>
extension. The configuration file is searched for lines beginning
with <TT><B><FONT SIZE=4 FACE="Courier New">#*</FONT></B></TT>.
This prefix is stripped, and script arguments are substituted.
The first script argument in the invocation is substituted for
each occurrence of <TT><B><FONT SIZE=4 FACE="Courier New">$0</FONT></B></TT>,
the second for each occurrence of <TT><B><FONT SIZE=4 FACE="Courier New">$1</FONT></B></TT>,
and so on. After script argument substitution, the invocation
command is interpreted and executed.
<P>
If the <TT><I><FONT SIZE=4 FACE="Courier New">config_file</FONT></I></TT>
is omitted, rom960 reads commands from <TT><B><FONT SIZE=4 FACE="Courier New">stdin</FONT></B></TT>;
no argument substitution is done. 
<HR>

<H3>Options </H3>

<HR>

<UL>
<LI><TT><B><FONT SIZE=4 FACE="Courier New">h</FONT></B></TT> 
<BR>
Displays help information to <TT><B><FONT SIZE=4 FACE="Courier New">stdout</FONT></B><FONT SIZE=4 FACE="Courier New">
</FONT></TT>and exits.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">V</FONT></B></TT> 
<BR>
Displays the version number and copyright date to standard error
and continues.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">v960<BR>
</FONT></B></TT>Displays the version number and copyright date
to standard error and exits. 
</UL>

<HR>

<H3>Commands </H3>

<HR>

<UL>
<LI><TT><B><FONT SIZE=4 FACE="Courier New">checksum </FONT></B><I><FONT SIZE=4 FACE="Courier New">image
start-addr end-addr<I><B> 16 </B></I></FONT></I><FONT SIZE=4 FACE="Courier New">|
<I><B>32 </B>checksum-addr</I> <BR>
</FONT></TT>Computes a 16- or 32-bit crc checksum over the address
range from <TT><I><FONT SIZE=4 FACE="Courier New">start-addr</FONT></I></TT>
to <TT><I><FONT SIZE=4 FACE="Courier New">end-addr</FONT></I><FONT SIZE=4 FACE="Courier New">
</FONT></TT>(inclusive) and stores it at the designated checksum
address.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">help</FONT></B><FONT SIZE=4 FACE="Courier New">
<BR>
</FONT></TT>Displays help information to <TT><B><FONT SIZE=4 FACE="Courier New">stdout</FONT></B></TT>
and continues.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">ihex </FONT></B><I><FONT SIZE=4 FACE="Courier New">image<I><B>
</B>output_intel_hex_file</I></FONT></I><FONT SIZE=4 FACE="Courier New">
[ <B>mode16</B> | <B>mode32</B> ] <BR>
</FONT></TT>Translates a binary ROM image to Intel hex format
suitable for downloading to an intelligent PROM programmer. The
optional <TT><B><FONT SIZE=4 FACE="Courier New">mode16</FONT></B></TT>
argument produces extended segment address records; <TT><B><FONT SIZE=4 FACE="Courier New">mode32</FONT></B></TT>
(the default) produces extended linear address records.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">map </FONT></B><I><FONT SIZE=4 FACE="Courier New">object_file</FONT></I></TT><B>
<BR>
</B>Produces a listing to <TT><B><FONT SIZE=4 FACE="Courier New">stdout</FONT></B></TT>
of the sections in the object file in address order with their
addresses and sizes in hexadecimal. It also shows in decimal the
size of the image file that <TT><B><FONT SIZE=4 FACE="Courier New">mkimage</FONT></B></TT>
would produce from this object file.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">mkimage </FONT></B><I><FONT SIZE=4 FACE="Courier New">object_input
image_output</FONT></I><FONT SIZE=4 FACE="Courier New"> [<I>section</I>]&#133;
<BR>
</FONT></TT>Translates an executable file into a memory image
containing an image of the program as it would appear when downloaded.
Sections are padded with zeros. No space is allowed for .bss.
By default, the file contains all sections of <TT><B><FONT SIZE=4 FACE="Courier New">STYP_TEXT</FONT></B></TT>
and <TT><B><FONT SIZE=4 FACE="Courier New">STYP_DATA</FONT></B></TT>
in the order of their starting addresses. You can override this
by specifying the section names.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">mkfill </FONT></B><I><FONT SIZE=4 FACE="Courier New">object_input
image_output fill_character</FONT></I><FONT SIZE=4 FACE="Courier New">
<BR>
</FONT></TT>Translates an executable file into a memory image
containing an image of the program as it would appear when downloaded.
Sections are padded with the fill character specified. No space
is allowed for .bss. The file contains all sections of <TT><B><FONT SIZE=4 FACE="Courier New">STYP_TEXT</FONT></B></TT>
and <TT><B><FONT SIZE=4 FACE="Courier New">STYP_DATA</FONT></B></TT>
in order of their starting addresses.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">move </FONT></B><I><FONT SIZE=4 FACE="Courier New">object-file<I><B>
</B></I></FONT></I><FONT SIZE=4 FACE="Courier New">[ <I>mem_sect
</I>{<I> phys_address</I><B> </B>|<B> after<I> </I></B><I>section-name
</I>}<I><B> </B></I>]<BR>
</FONT></TT>Changes the physical address of <TT><I><FONT SIZE=4 FACE="Courier New">mem_sect</FONT></I></TT>
in the object file header to <TT><I><FONT SIZE=4 FACE="Courier New">phys_address</FONT></I></TT>
so that it can be used for a particular EPROM. If <TT><I><FONT SIZE=4 FACE="Courier New">mem_sect</FONT></I></TT>
and <TT><I><FONT SIZE=4 FACE="Courier New">phys_address</FONT></I></TT>
are not present, the .data section will be moved to immediately
follow the .text section. You can also specify the address in
the relative phrase <TT><B><FONT SIZE=4 FACE="Courier New">after<I><B>
</B></I></FONT></B><I><FONT SIZE=4 FACE="Courier New">section-name</FONT></I></TT>.
<BR>
<BR>
Note: This command alters the contents of the section headers
in the object file. It does not revise references to addresses
in the moved section.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">packhex </FONT></B><I><FONT SIZE=4 FACE="Courier New">hex_file</FONT></I><B><FONT SIZE=4 FACE="Courier New">
<BR>
</FONT></B></TT>Compresses the hex file by repacking the data
records; the hex file will be converted in place.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">patch </FONT></B><I><FONT SIZE=4 FACE="Courier New">image_to_patch
file_holding_patch address</FONT></I><FONT SIZE=4 FACE="Courier New">
<BR>
</FONT></TT>Writes the contents of the file holding the patch
into the image to patch at offset <TT><I><FONT SIZE=4 FACE="Courier New">address</FONT></I></TT>.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">permute-a </FONT></B><I><FONT SIZE=4 FACE="Courier New">image_input
new_order image_output</FONT></I><FONT SIZE=4 FACE="Courier New">
<BR>
</FONT></TT>Scrambles the ROM by specifying a permutation of the
address lines. <TT><I><FONT SIZE=4 FACE="Courier New">new_order</FONT></I></TT>
is a series of 32 integers separated by spaces that specifies,
for each address bit from left to right, that bit's new position
in the output ROM image. Thus, a new order of 1 0 2 3 4 5 6 78
9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 2627 28 29 30
31 reverses the positions of each odd/even pair of bytes. This
command fails if the <TT><B><FONT SIZE=4 FACE="Courier New">rom</FONT></B></TT>
or <TT><B><FONT SIZE=4 FACE="Courier New">split</FONT></B></TT>
command does not precede it to describe the ROM space to be filled.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">permute-d </FONT></B><I><FONT SIZE=4 FACE="Courier New">image_input
new_order image_output</FONT></I><FONT SIZE=4 FACE="Courier New">
<BR>
</FONT></TT>Permutes the bits in each ROM-width hunk of data in
a ROM image. <TT><I><FONT SIZE=4 FACE="Courier New">new_order</FONT></I></TT>
is a series of integers separated by spaces that specifies for
each data bit from least to most significant position that bit's
new position in the ROM image. Thus, a new order of 7 6 5 4 3
2 1 0 reverses the order of the bits in an 8-bit-wide ROM image.
The ROM-width used by this command is the last ROM-width value
provided by a <TT><B><FONT SIZE=4 FACE="Courier New">rom</FONT></B></TT>
or <TT><B><FONT SIZE=4 FACE="Courier New">split</FONT></B></TT>
command.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">rom </FONT></B><I><FONT SIZE=4 FACE="Courier New">rom_length
rom_width<I><B> </B></I></FONT></I><FONT SIZE=4 FACE="Courier New">[
<I>rom_count</I> ]<I> <BR>
</I></FONT></TT>Specifies length and width of ROM images for subsequent
<TT><B><FONT SIZE=4 FACE="Courier New">permute-a</FONT></B><FONT SIZE=4 FACE="Courier New">
</FONT></TT>and <TT><B><FONT SIZE=4 FACE="Courier New">permute-d</FONT></B></TT>
commands; allows the <TT><B><FONT SIZE=4 FACE="Courier New">split</FONT></B></TT>
command to issue warnings if its results will not fit the ROM
space described.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">sh </FONT></B><I><FONT SIZE=4 FACE="Courier New">command</FONT></I><FONT SIZE=4 FACE="Courier New">
<BR>
</FONT></TT>Spawns a shell command. Upon completion of the command,
returns control to rom960.
<LI><TT><B><FONT SIZE=4 FACE="Courier New">split </FONT></B><I><FONT SIZE=4 FACE="Courier New">image
memlen memwidth romlen romwidth outfile_nm</FONT></I><FONT SIZE=4 FACE="Courier New">
<BR>
</FONT></TT>Splits a memory image of one length in bytes and width
in bits into ROM images, possibly of another length in bytes and
width in bits. The <TT><I><FONT SIZE=4 FACE="Courier New">romlen</FONT></I></TT>
and <TT><I><FONT SIZE=4 FACE="Courier New">romwidth</FONT></I></TT>
information given to this command can also be used in subsequent
<TT><B><FONT SIZE=4 FACE="Courier New">permute-a</FONT></B></TT>
and <TT><B><FONT SIZE=4 FACE="Courier New">permute-d</FONT></B></TT>
commands. <TT><I><FONT SIZE=4 FACE="Courier New">outfile_nm</FONT></I></TT>
is used as a root name for the various images produced. Each output
file is of the form <TT><I><FONT SIZE=4 FACE="Courier New">outfile_nm.xy</FONT></I></TT>,
where <TT><I><FONT SIZE=4 FACE="Courier New">x</FONT></I></TT>
and <TT><I><FONT SIZE=4 FACE="Courier New">y</FONT></I></TT> specify
the position of the ROM in the memory image. Thus, <TT><I><FONT SIZE=4 FACE="Courier New">x</FONT></I></TT>
indicates the ROM's length-wise position in the image from 0 (lowest
part of address range) to (<TT><I><FONT SIZE=4 FACE="Courier New">memlen</FONT></I></TT>
/ <TT><I><FONT SIZE=4 FACE="Courier New">romlen</FONT></I></TT>),
and <TT><I><FONT SIZE=4 FACE="Courier New">y</FONT></I></TT> indicates
the horizontal position in the image of the ROM, from 0 (first
<TT><I><FONT SIZE=4 FACE="Courier New">romwidth</FONT></I></TT>
bits of memory-width-bits-wide data path) to (<TT><I><FONT SIZE=4 FACE="Courier New">memlen</FONT></I></TT>
/ <TT><I><FONT SIZE=4 FACE="Courier New">romwidth</FONT></I></TT>).

</UL>

<HR>

<P>
<A HREF="#top"><IMG SRC="../icons/uparw.gif" ALIGN="BOTTOM"></A><I>Return
to the top of this page.</I> 
<P>
<A HREF="ctoolshm.htm"><IMG SRC="../icons/index2.gif" ALIGN="BOTTOM"></A><I>Go
to the ic960 Interface Index.</I> 
<P>
<A HREF="gnuhome.htm"><IMG SRC="../icons/index2.gif" ALIGN="BOTTOM"></A><I>Go
to the gcc960 Interface Index.</I> 
</BODY>

</HTML>

