#-----------------------------------------------------------------------------
#                       Makefile for gld960
#
# $Id: Makefile,v 1.87 1995/12/27 05:17:25 alex Exp $
#-----------------------------------------------------------------------------


# Essential under System V, harmless elsewhere
SHELL	= /bin/sh

ITARG	= lnk960
TARG	= gld960
TARGNAME= "Intel 80960 Linker"
IDIR	= ../../include
LDIR	= $(G960BASE)/lib
CFLAGS	= $(OPT) -I$(IDIR) -DGNU960 -DHOST=$(HOSTNM) $(HOSTDEFS)

#
# Add to CFLAGS:
# -Dmalloc=ldmalloc -Dfree=ldfree -Drealloc=ldrealloc -DDEBUGHEAP
# To enable heap debug code in ldmisc.c
#

#-----------  DEFAULTS  ---------------------------
O	= o
RM	= rm -f
CP	= cp
MV	= mv
LN	= ln
STRIP	= strip
OPT	= -g
IOPT	= -O
OUT	= -o
OBJLIST	= $(OBJS)
HOSTNM	= \"$(HOST)\"
DEST	= $(G960BASE)/bin
LINKC   = $(CC) $(OPT)
ROMIT   = echo No op
SYS_STUBS =
#-----------------------------------------------------------------------------
#		Uncomment for GCC960 HOSTED linker
#
#__gcc960__## To use this, get a mon960 eval board with either big or little-
#__gcc960__## endian memory.  To use two pass compilation, you'll have to 
#__gcc960__## mkdir pdb, and set the environment variable G960PDB to this dir.
#
#__gcc960__## Next, compile toolib and libbfd.  There is a gcc960 HOST in
#__gcc960__## their Makefiles.
#
#__gcc960__## Next, goto the directory where you made libbfd and make a symlink
#__gcc960__## to point to the toolib.a you built.
#
#__gcc960__## Now, build the linker, using the command:
#__gcc960__## make OPT=optimization LDIR=the_dir_where_you_built_libbfd [TARGET=targ]
#__gcc960__##    where "targ" is either tc or hk (tc is the default).
#
#__gcc960__## Download the linker to the target using the command:
#__gcc960__## gdb960 -r <port> -t mon960 -b 38400 ./gld960
#
#__gcc960__## Then, to test it, compile hello world with the gnu compiler using the
#__gcc960__## commands:
#__gcc960__## gcc960 -c -Fcoff -Tmhk hello.c -g
#__gcc960__## gcc960 -v -Fcoff -Tmhk hello.o -g -o hello > file 2>&1
#__gcc960__## Edit file.  Change it to look something like this (note the addition of
#__gcc960__## the -z option):
#__gcc960__##
#__gcc960__## -z -o hello -V -Ttext 0x08400
#__gcc960__##
#__gcc960__##_heap_size=0x2000;
#__gcc960__##_heap_base=(_end+0xf)&~0xf;
#__gcc960__##_heap_end=_heap_base+_heap_size-1;
#__gcc960__##_stackbase=(_heap_end+0x40)&~0x3f;
#__gcc960__## -ACA /ffs/p1/dev//sun4/lib/libcoff/crt960g.o hello.o -lqfg -lcg -lm -lhk -lll -lh
#__gcc960__##
#__gcc960__## Use this with any unix hosted gld960 linker using the command:
#__gcc960__## gld960 -Fcoff file
#__gcc960__##
#__gcc960__## Save off the file hello into a new file:
#__gcc960__## mv hello hello.gold
#__gcc960__##
#__gcc960__## Now, execute the linker that is on the target using gdb960.  To do so,
#__gcc960__## use the following commands:
#__gcc960__## gdb960 -r <port> -t mon960 -b 38400
#__gcc960__## file ./gld960
#__gcc960__## run -Fcoff file
#__gcc960__## quit
#__gcc960__##
#__gcc960__## Now, verify the hello produced with the gld960 on the target with the one
#__gcc960__## produced on the host using cmp:gdb .o files are the same as those in the other directory.
#__gcc960__## cmp hello hello.gold
#__gcc960__##
#__gcc960__#TARGET    = cx
#__gcc960__#ARCH      = CA
#__gcc960__#CC        = gcc960 -Fcoff -A$(ARCH) -fsigned-char -mic-compat -traditional
#__gcc960__#LD        = gld960 -Fcoff
#__gcc960__#LDFLAGS   =
#__gcc960__#HOSTLIBS  =
#__gcc960__#LINKC     = $(LD) -A$(ARCH) gcc960$(TARGET).ld -c -lm -lrom -lh -lqf
#__gcc960__#ROMIT     = rom960 gcc960$(TARGET)
#__gcc960__#HOSTDEFS  = -DHOST_SYS=GCC960_SYS
#__gcc960__#SYS_STUBS = sysstubs.$O
#__gcc960__#
#-----------------------------------------------------------------------------
#		Uncomment for i386 / System V  release 4
#__i386vr4__#HOSTDEFS	= -DHOST_SYS=i386_SYSV_SYS
#-----------------------------------------------------------------------------
#		Uncomment for i386 / System V release 3.2
#__i386v__#HOSTLIB	= -lPW
#__i386v__#HOSTDEFS	= -DHOST_SYS=i386_SYSV_SYS
#-----------------------------------------------------------------------------
#               Uncomment for ncr 68000 / System V
#__68020v__#HOSTDEFS        = -DHOST_SYS=NCR_SYSV_SYS
#-----------------------------------------------------------------------------
#		Uncomment for IBM RS6000
#
#	Note special rules for lex:
#	C CODE GENERATED BY RS6000 lex *ASSUMES* THAT CHARS DEFAULT
#	TO UNSIGNED, SO DON'T COMPILE IT WITH -qchars=signed.  
#
#__rs6000__#HOSTDEFS	= -DHOST_SYS=AIX_SYS -qchars=signed
#__rs6000__#LDFLAGS	= -b nodelcsect
#-----------------------------------------------------------------------------
#		Uncomment for VAX/Ultrix
#__vax-ultrix__#HOSTDEFS= -DHOST_SYS=VAX_ULTRIX_SYS
#-----------------------------------------------------------------------------
#		Uncomment uncommented for Decstations
#__dec3100__#HOSTDEFS	= -DHOST_SYS=DEC3100_SYS
#-----------------------------------------------------------------------------
#		Uncomment for HP9000-300
#__hp9000__#HOSTDEFS	= -DHOST_SYS=HP9000_SYS
#__hp9000__#OPT		= 
#-----------------------------------------------------------------------------
#		Uncomment for HP9000-700
#__hp700__#HOSTDEFS	= -DHOST_SYS=HP9000_SYS
#__hp700__#OPT		= 
#-----------------------------------------------------------------------------
#		Uncomment for Macintosh A/UX
#__mac-aux__#HOSTDEFS	= -DHOST_SYS=MACAUX_SYS
#-----------------------------------------------------------------------------
#		Uncomment for Apollo 400
#__ap400__#HOSTDEFS	= -DHOST_SYS=APOLLO400_SYS -A nansi
#-----------------------------------------------------------------------------
#		Uncomment for Sun 3
#__sun3__#HOSTDEFS	= -DHOST_SYS=SUN3_SYS
#__sun3__#LDFLAGS	= -Bstatic
#-----------------------------------------------------------------------------
#		Uncomment for Sun 386i
#__sun386i__#HOSTDEFS	= -DHOST_SYS=SUN3_SYS
#__sun386i__#LDFLAGS	= -Bstatic
#-----------------------------------------------------------------------------
#		Uncomment for Sun 4
#__sun4__#HOSTDEFS	= -DHOST_SYS=SUN4_SYS
#__sun4__#LDFLAGS	= -Bstatic
#-----------------------------------------------------------------------------
#               Uncomment for Solaris on the sun4 (sol-sun4).
#__sol-sun4__#HOSTDEFS	= -DHOST_SYS=i386_SYSV_SYS
#__sol-sun4__#LDFLAGS	= -Bstatic
#-----------------------------------------------------------------------------
#		Uncomment for DOS
#__dos__#O		= obj
#__dos__#EXE		= .exe
#__dos__#EXP		= .exp
#__dos__#RM		= del
#__dos__#CP		= copy
#__dos__#MV		= ren
#__dos__#LN		= copy
#__dos__#STRIP		= echo # no-op
#__dos__#HOSTDEFS	= -DHOST_SYS=DOS_SYS -DDOS -DUSG -w1 -fsoft
#__dos__#OPT		= -g
#__dos__#OBJLIST	= @objs.rf
#__dos__#IOPT		= -O3
#__dos__#LDFLAGS	= "-stack 80000h" "-maxreal 0ffffh" -fsoft -twocase -nomap -nostub
#__dos__#OUT		= -e
#__dos__#DEST		= $(G960BASE,/=\)\bin
#__dos__#HOSTNM		= "dos"
#			Metaware can't handle -DHOST=\"xxx\"
#__dos__#I_DIR  	=$(IDIR,/=\)
#__dos__#CC         = HC386
#__dos__#DOSXP		= c:\tnt
#__dos__#DOSXB	    = $(DOSXP)\bin
#__dos__#DOSXN		= $(DOSXB)\gotnt.exe
#__dos__#CFIG1		= $(DOSXB)\cfig386 -clear $(TARG)$(EXE) -SAVEREGS -MAXVCPIMEM 0
#__dos__#CFIG2		= $(DOSXB)\cfig386 $(TARG)$(EXE) -VMFILE VMMDRV.EXP
#__dos__#CFIG3		= $(DOSXB)\cfig386 $(TARG)$(EXE) -MAXXMSMEM 300000H
#-----------------------------------------------------------------------------
#		Uncomment for Windows 95
#__win95__#O		= obj
#__win95__#EXE		= .exe
#__win95__#LN		= copy
#__win95__#STRIP		= echo # no-op
#__win95__#HOSTDEFS	= -W2 -DWIN95 -DHOST_SYS=DOS_SYS -DDOS -DUSG
#__win95__#OPT		= -Zi
#__win95__#OBJLIST		= @objs.rf
#__win95__#IOPT		= -O2
#__win95__#LDFLAGS		= 
#__win95__#OUT		= -o
#__win95__#DEST		= $(G960BASE,/=\)\bin
#__win95__#I_DIR		= $(IDIR,/=\)
#__win95__#CC		= CL
#-----------------------------------------------------------------------------

LIBS	= $(LDIR)/libbfd.a $(LDIR)/cc_info.a $(LDIR)/toolib.a
#__dos__#LIBS	= $(LDIR)/libbfd.lib $(LDIR)/cc_info.lib $(LDIR)/toolib.lib
#__win95__#LIBS	= $(LDIR)/libbfd.lib $(LDIR)/cc_info.lib $(LDIR)/toolib.lib
OBJS	= ld960sym.$O ldccinfo.$O ldemul.$O ldexp.$O ldfile.$O ldgld960.$O \
		ldcache.$O ldgram.$O ldlang.$O ldlex.$O ldlnk960.$O ldmain.$O \
		ldmisc.$O ldplace.$O ldsplit.$O ldsym.$O ldwrite.$O \
		ldregion.$O callsite.$O ver960.$O $(SYS_STUBS)

$(ITARG): $(TARG)
	$(CP) $(TARG)$(EXE) $(ITARG)$(EXE)

$(TARG): objs.rf hc.pro $(OBJS) $(LIBS) 
#__win95__#	!if $(HOSTNM) == "win95"
#__win95__#		$(CC) $(OPT) $(LDFLAGS) $(OUT) $(TARG)$(EXE) $(OBJLIST) 
#__dos__#	!if $(HOSTNM) == "dos"
#__dos__#		$(CC) $(OPT) $(LDFLAGS) $(OUT) $(TARG) $(OBJLIST) 
#__dos__#		copy /b $(DOSXN)+$(TARG)$(EXP) $(TARG)$(EXE)
#__dos__#		$(CFIG1)
#__dos__#		$(CFIG2)
#__dos__#		$(CFIG3)
#__dos__#       !else
#__win95__#       !else
			$(LINKC) $(LDFLAGS) $(OUT) $(TARG) $(OBJLIST) $(LIBS) $(HOSTLIB)
			$(ROMIT) $(TARG)
#__dos__#	!endif		
#__win95__#	!endif		

objs.rf:
#__dos__#	!foreach i $(OBJS)
#__dos__#		echo $i >>objs.rf
#__dos__#	!end
#__dos__#	!foreach i $(LIBS)
#__dos__#		echo -l$i >>objs.rf
#__dos__#	!end
#__win95__#	!foreach i $(OBJS) $(LIBS)
#__win95__#		echo $i >>objs.rf
#__win95__#	!end

hc.pro:
#__dos__#       $(CP) $(I_DIR)\sys\hc.pro hc.pro
#__win95__#	@echo

# The grammar should rarely or never change, so we build from the .c and .h
# files rather than the corresponding .y and .l files.  In fact, some hosts
# (DOS) don't even have yacc/lex, so we *have* to build from C files there.
# If the grammar *does* change, the target 'update_grammar' should be invoked
# manually to rebuild the C files.

# Disable any built-in yacc/lex rules
.l.o: ;
.l.c: ;
.y.o: ;
.y.c: ;

# The lexical analyzer for ld must be built explicitly on rs6000 hosts.
#__rs6000__#ldlex.o: ldlex.l
#__rs6000__#	$(RM) ldlex.c
#__rs6000__#	lex ldlex.l
#__rs6000__#	mv lex.yy.c ldlex.c
#__rs6000__#	$(CC) $(CFLAGS) -c ldlex.c

update_grammar:
	yacc -d ldgram.y
	mv y.tab.c ldgram.c
	mv y.tab.h ldgramtb.h
	lex  -t ldlex.l > ldlex.c


ld960sym.$O:	$(IDIR)/sysv.h $(IDIR)/bfd.h $(IDIR)/sysdep.h ld.h ldsym.h
ld960sym.$O:	ldlang.h ldmisc.h 
ldccinfo.$O:	$(IDIR)/sysdep.h $(IDIR)/bfd.h ldsym.h ldlang.h ldmisc.h
ldccinfo.$O:	$(IDIR)/cc_info.h
ldemul.$O:	$(IDIR)/sysdep.h $(IDIR)/bfd.h config.h ld.h ldemul.h ldmisc.h
ldexp.$O:	$(IDIR)/sysdep.h $(IDIR)/bfd.h ld.h ldmain.h ldmisc.h ldexp.h
ldexp.$O:	ldgramtb.h ldsym.h ldlang.h
ldfile.$O:	$(IDIR)/sysdep.h $(IDIR)/bfd.h ldmisc.h ldlang.h ldfile.h
ldgld960.$O:	$(IDIR)/sysdep.h $(IDIR)/bfd.h ld.h config.h ldemul.h ldfile.h
ldgld960.$O:	ldmisc.h
ldgram.$O:	$(IDIR)/sysdep.h $(IDIR)/bfd.h ld.h ldexp.h ldlang.h
ldgram.$O:	ldemul.h ldfile.h ldmisc.h
ldlang.$O:	$(IDIR)/bfd.h ld.h ldmain.h ldsym.h ldgramtb.h ldlang.h ldexp.h
ldlang.$O:	ldemul.h ldlex.h ldmisc.h ldplace.h
ldlex.$O:	$(IDIR)/sysdep.h $(IDIR)/bfd.h ldgramtb.h ld.h ldexp.h
ldlex.$O:	ldgram.h ldmisc.h
ldlnk960.$O:	$(IDIR)/sysdep.h $(IDIR)/bfd.h ld.h config.h ldemul.h ldmisc.h
ldlnk960.$O:	ldlang.h ldfile.h
ldmain.$O:	$(IDIR)/sysdep.h $(IDIR)/bfd.h config.h ld.h ldmain.h ldmisc.h
ldmain.$O:	ldwrite.h ldgramtb.h ldsym.h ldlang.h ldemul.h ldlex.h ldfile.h
ldmisc.$O:	$(IDIR)/sysdep.h $(IDIR)/bfd.h ld.h ldmisc.h ldlang.h ldlex.h
ldsplit.$O:	$(IDIR)/sysdep.h $(IDIR)/bfd.h ld.h ldexp.h ldlang.h
ldsym.$O:	$(IDIR)/sysdep.h $(IDIR)/bfd.h ld.h ldsym.h ldmisc.h ldlang.h
ldwrite.$O:	$(IDIR)/sysdep.h $(IDIR)/bfd.h ldlang.h ld.h ldwrite.h ldmisc.h
ldwrite.$O:	ldsym.h ldgramtb.h
ldplace.$O:	$(IDIR)/sysdep.h $(IDIR)/bfd.h ldplace.h ldregion.h callsite.h ldsym.h ldmisc.h ldlang.h ldcache.h
ldregion.$O:	$(IDIR)/bfd.h ldplace.h ldregion.h ldcache.h
ldcache.$O:	$(IDIR)/sysdep.h $(IDIR)/bfd.h ldcache.h
callsite.$O:	callsite.h
#__68020v__#ld-gld960.x:        ld-gld960.script
#__68020v__#ld-lnk960-r.x:      ld-lnk960-r.script
#__68020v__#ld-lnk960.x:        ld-lnk960.script
#-----------------------------------------------------------------------------
#		'STANDARD' GNU/960 TARGETS BELOW THIS POINT
#-----------------------------------------------------------------------------
ver960.o: FORCE
	$(RM) ver960.c
	echo static char gnu960_ver[]=	 		 > ver960.c
	echo "	\"$(TARGNAME) `cat _version`, `date`\";"	>> ver960.c
	echo \#include \"ver960.h\"			>> ver960.c
	$(CC) $(CFLAGS) -c ver960.c

# DOS version
ver960.obj: FORCE
	$(RM) ver960.c
	echo static char gnu960_ver[]=	 	 > ver960.c
	=$(LDIR)/verstr $(TARGNAME) _version	>> ver960.c
	echo \#include "ver960.h"		>> ver960.c
	$(CC) $(CFLAGS) -c ver960.c

# Dummy target to force execution of dependent targets.
#
FORCE:


# 'G960BASE' will be defined at invocation
install:
	make $(TARG) LDIR=$(LDIR) OPT="$(IOPT)" DOSXP=$(DOSXP) DOSXN=$(DOSXN)
	-$(STRIP) $(TARG)$(EXE)
	(cd $(DEST); $(RM) $(TARG)$(EXE))
	$(CP) $(TARG)$(EXE) $(DEST)
#__dos__#	(cd $(DEST); $(RM) $(TARG)$(EXP))
#__dos__#	$(CP) $(TARG)$(EXP) $(DEST)

install_ctools:
	make install TARG="$(ITARG)"

# Separate lines required in order for DOS version to work
#
clean:
	$(RM) $(ITARG)$(EXE)
	$(RM) $(TARG)$(EXE)
	$(RM) *.$O
	$(RM) core
	$(RM) *.rf		# for DOS, doesn't hurt anybody else
	$(RM) *.rex		# for DOS, doesn't hurt anybody else
	$(RM) *.exp		# for DOS, doesn't hurt anybody else

#-----------------------------------------------------------------------------
# Target to uncomment host-specific lines in this makefile, i.e. lines
# beginning in column 1 with the following string:  #__<hostname>__# .
# Original Makefile is backed up as 'Makefile.old'.
#
# Invoke with:  make make HOST=xxx
#-----------------------------------------------------------------------------
make:
	-@grep -s "^#The next line was generated by 'make make'" Makefile; \
	if test $$? = 0 ; then	\
		echo "Makefile has already been processed with 'make make'";\
		exit 1; \
	elif test $(HOST)x = x ; then \
		echo 'Specify "make make HOST=???"'; \
		exit 1; \
	else \
		mv -f Makefile Makefile.old; \
		echo "#The next line was generated by 'make make'"> Makefile;\
		echo "HOST=$(HOST)"				 >> Makefile; \
		echo						 >> Makefile; \
		sed "s/^#__$(HOST)__#//" < Makefile.old		 >> Makefile; \
		if test $(HOST) = dos; then mv Makefile makefile; fi \
	fi
