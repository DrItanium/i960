#The next line was generated by 'mkmake'
HOST=i386_nbsd1

# Main Makefile for GNU m4.


# Essential under System V, harmless elsewhere
SHELL	= /bin/sh

TARG	= mpp960
TARGNAME= "Intel 80960 Macro Preprocessor"
IDIR	= ../../include
LDIR	= $(G960BASE)/lib
CCFLAGS	= $(OPT) -I$(IDIR) -DGNU960 -DHOST=$(HOSTNM) $(HOSTDEFS) $(MPPDEFS)
NOLINK  = -c
MPPDEFS =  -DSTDC_HEADERS=1 -DHAVE_STRING_H=1 $(MEMORY_H) -DHAVE_TMPFILE=1 -DATS960=1 $(IS_ALLOCA)
CFLAGS	= $(CCFLAGS) $(NOLINK)

#-----------  DEFAULTS  ---------------------------
O	  = o
LIB	  = a
RM	  = rm -f
CP	  = cp
MV	  = mv
LN	  = ln
AR	  = ar cvr $@ $(LIBOBJS)
STRIP	  = strip
OPT	  = -g
IOPT	  = -O
OUT	  = -o
OBJLIST	  = $(OBJS)
HOSTNM	  = \"$(HOST)\"
DEST	  = $(G960BASE)/bin
IS_ALLOCA = -DHAVE_ALLOCA_H=1 
MEMORY_H  = -DNEED_MEMORY_H=1
RANLIB	  = echo no ranlib
LIBALLOC  = 
LINKC     = $(CC) $(OPT)
ROMIT     = @echo
#-----------------------------------------------------------------------------
#		Uncomment for gcc960
#__gcc960__##
#__gcc960__## To test mpp960 as a 960 application, first build it: make make HOST=gcc960
#__gcc960__## mkdir pdb; make OPT=-O4_1 ...
#__gcc960__## To test it, goto the ats depth suite, macro subsuite and make a workspace.
#__gcc960__## Hook up a tomcat board with mon960 on it to a host that gdb960 supports,
#__gcc960__## and download mpp960 to the tomcat board with gdb960.  Make an environment file
#__gcc960__## for this host in your workspace.  The usual definitions will hold, but
#__gcc960__## make the following change:
#__gcc960__##
#__gcc960__##      DTMACRO="$DTCWD/pauls_mpp960";export DTMACRO
#__gcc960__##
#__gcc960__## Run the test suite in the usual manner, diagnoising failures.
#__gcc960__##
#__gcc960__#OMFFLAG  = -Fcoff
#__gcc960__#TARGET   = tc
#__gcc960__#CC       = gcc960 $(OMFFLAG) -Tm$(TARGET) -fsigned-char -mic-compat -Z pdb
#__gcc960__#LD       = gld960
#__gcc960__#LINKC    = $(LD) -ACA gcc960$(TARGET).ld -c -lmg -lromg -lhg -lqfg -Z pdb
#__gcc960__#ROMIT    = rom960 gcc960$(TARGET)
#__gcc960__#HOSTDEFS = -D__GCC960 -UNEED_MEMORY_H
#__gcc960__#MEMORY_H =
#__gcc960__#AR       = gar960 cvr $@ $(LIBOBJS)
#__gcc960__#ROMIT    = rom960 gcc960$(TARGET)
#-----------------------------------------------------------------------------
#		Uncomment for i386 / System V  release 4
#__i386vr4__#HOSTDEFS	= -DHOST_SYS=i386_SYSV_SYS -Xc -Di386
#__i386vr4__#IS_ALLOCA = 
#__i386vr4__#LIBALLOC = alloca.$O
#-----------------------------------------------------------------------------
#		Uncomment for i386 / System V release 3.2
#__i386v__#HOSTLIB	= -lPW
#__i386v__#HOSTDEFS	= -DHOST_SYS=i386_SYSV_SYS
#__i386v__#IS_ALLOCA = 
#__i386v__#LIBALLOC = alloca.$O
#-----------------------------------------------------------------------------
#               Uncomment for ncr 68000 / System V
#__68020v__#HOSTDEFS        = -DHOST_SYS=NCR_SYSV_SYS
#-----------------------------------------------------------------------------
#		Uncomment for IBM RS6000
#
#	Note special rules for lex:
#	C CODE GENERATED BY RS6000 lex *ASSUMES* THAT CHARS DEFAULT
#	TO UNSIGNED, SO DON'T COMPILE IT WITH -qchars=signed.  
#
#__rs6000__#HOSTDEFS	= -DHOST_SYS=AIX_SYS -qchars=signed
#__rs6000__#LDFLAGS	= -b nodelcsect
#__rs6000__#IS_ALLOCA	= 
#__rs6000__#LIBALLOC = alloca.$O
#-----------------------------------------------------------------------------
#		Uncomment for VAX/Ultrix
#__vax-ultrix__#HOSTDEFS= -DHOST_SYS=VAX_ULTRIX_SYS
#-----------------------------------------------------------------------------
#		Uncomment uncommented for Decstations
#__dec3100__#HOSTDEFS	= -DHOST_SYS=DEC3100_SYS
#-----------------------------------------------------------------------------
#		Uncomment for HP9000-300
#__hp9000__#HOSTDEFS	= -DHOST_SYS=HP9000_SYS
#__hp9000__#OPT		= 
#__hp9000__#IS_ALLOCA = 
#__hp9000__#LIBALLOC = alloca.$O
#-----------------------------------------------------------------------------
#		Uncomment for HP9000-700
#__hp700__#HOSTDEFS	= -DHOST_SYS=HP9000_SYS
#__hp700__#OPT		= 
#__hp700__#IS_ALLOCA = 
#__hp700__#LIBALLOC = alloca.$O
#-----------------------------------------------------------------------------
#		Uncomment for Macintosh A/UX
#__mac-aux__#HOSTDEFS	= -DHOST_SYS=MACAUX_SYS
#-----------------------------------------------------------------------------
#		Uncomment for Apollo 400
#__ap400__#HOSTDEFS	= -DHOST_SYS=APOLLO400_SYS -A nansi
#-----------------------------------------------------------------------------
#		Uncomment for Sun 3
#__sun3__#HOSTDEFS	= -DHOST_SYS=SUN3_SYS
#__sun3__#LDFLAGS	= -Bstatic
#-----------------------------------------------------------------------------
#		Uncomment for Sun 386i
#__sun386i__#HOSTDEFS	= -DHOST_SYS=SUN3_SYS
#__sun386i__#LDFLAGS	= -Bstatic
#-----------------------------------------------------------------------------
#		Uncomment for Sun 4
#__sun4__#RANLIB 	= ranlib $@
#__sun4__#HOSTDEFS	= -DHOST_SYS=SUN4_SYS
#__sun4__#LDFLAGS	= -Bstatic
#-----------------------------------------------------------------------------
#		Uncomment for i386_nbsd1
RANLIB		= ranlib $@
HOSTDEFS	= -DHOST_SYS=I386_NBSD1_SYS -DI386_NBSD1
LDFLAGS		= -Bstatic
#-----------------------------------------------------------------------------
#               Uncomment for Solaris on the sun4 (sol-sun4).
#__sol-sun4__#HOSTDEFS	= -DHOST_SYS=i386_SYSV_SYS -Xs
#__sol-sun4__#LDFLAGS	= -Bstatic
#-----------------------------------------------------------------------------
#		Uncomment for DOS
#__dos__#O		= obj
#__dos__#LIB		= lib
#__dos__#EXE		= .exe
#__dos__#EXP		= .exp
#__dos__#RM		= del
#__dos__#CP		= copy
#__dos__#MV		= ren
#__dos__#LN		= copy
#__dos__#AR		= 386lib $@ -create -twocase @libobjs
#__dos__#STRIP		= echo # no-op
#__dos__#HOSTDEFS	= -DHOST_SYS=DOS_SYS -DDOS -DUSG
#__dos__#TOOLLIB	= $(LDIR,/=\)\toolib.lib
#__dos__#OPT		= -g
#__dos__#OBJLIST	= @objs.rf
#__dos__#IOPT		= -O3
#__dos__#CCFLAGS	= -w1 -fsoft $(OPT) -I$(IDIR) -DGNU960 -DHOST=$(HOSTNM) $(HOSTDEFS) $(MPPDEFS)
#__dos__#CFLAGS		= @cflags.rf
#__dos__#LDFLAGS	= "-stack 80000h" "-maxreal 0ffffh" -fsoft -twocase -nomap -nostub
#__dos__#OUT		= -e
#__dos__#DEST		= $(G960BASE,/=\)\bin
#__dos__#HOSTNM		= "dos"
#			Metaware can't handle -DHOST=\"xxx\"
#__dos__#I_DIR 	    =$(IDIR,/=\)
#__dos__#CC     	= HC386
#__dos__#DOSXP		= c:\tnt
#__dos__#DOSXB	    = $(DOSXP)\bin
#__dos__#DOSXN		= $(DOSXB)\gotnt.exe
#__dos__#CFIG		= $(DOSXB)\cfig386 
#__dos__#CFIGFLAGS      = -saveregs -maxvcpimem 0 -vmfile vmmdrv.exp -maxxmsmem 0200000h
#-----------------------------------------------------------------------------
#		Uncomment for Windows 95
#__win95__#O		= obj
#__win95__#LIB		= lib
#__win95__#EXE		= .exe
#__win95__#LN		= copy
#__win95__#AR		= lib /OUT:$@ @libobjs.lbc
#__win95__#STRIP		= echo # no-op
#__win95__#HOSTDEFS	= -W2 -DWIN95 -DHOST_SYS=DOS_SYS -DDOS -DUSG
#__win95__#TOOLLIB		= $(LDIR,/=\)\toolib.lib
#__win95__#OPT		= -Zi
#__win95__#OBJLIST		= @objs.rf
#__win95__#IOPT		= -O2
#__win95__#CFLAGS		= @cflags.rf
#__win95__#DEST		= $(G960BASE,/=\)\bin
#__win95__#I_DIR		= $(IDIR,/=\)
#__win95__#CC		= CL
#__win95__#IS_ALLOCA	=
#__win95__#LIBALLOC	= alloca.$O
#-----------------------------------------------------------------------------

#### End of system configuration section. ####


LIBS	= libm4.$(LIB) $(LDIR)/toolib.$(LIB)

OBJS = m4.$O input.$O output.$O symtab.$O builtin.$O macro.$O \
debug.$O eval.$O path.$O format.$O ver960.$O

HEADERS = m4.h
LIBHEADERS = obstack.h regex.h getopt.h regex.h.old

SOURCES = m4.c input.c output.c symtab.c builtin.c macro.c \
debug.c eval.c path.c format.c
KNRSOURCES = _m4.c _input.c _output.c _symtab.c _builtin.c \
_macro.c _debug.c _eval.c _path.c _format.c
# LIBSOURCES = obstack.c regex.c getopt.c getopt1.c vfprintf.c alloca.c
LIBSOURCES = obstack.c regex.c getopt.c getopt1.c alloca.c

KNROBJS = _m4.$O _input.$O _output.$O _symtab.$O _builtin.$O \
_macro.$O _debug.$O _eval.$O _path.$O _format.$O ver960.$O
# LIBOBJS = obstack.$O regex.$O getopt.$O getopt1.$O vfprintf.$O $(LIBALLOC)
LIBOBJS = obstack.$O regex.$O getopt.$O getopt1.$O $(LIBALLOC)

# uncomment for KNR versions of reality
#
# SOURCES = $(KNRSOURCES)
# OBJS = $(KNROBJS)
#__sun4__# SOURCES = $(KNRSOURCES)
#__sun4__# OBJS = $(KNROBJS)
#__hp700__# SOURCES = $(KNRSOURCES)
#__hp700__# OBJS = $(KNROBJS)
#__hp9000__# SOURCES = $(KNRSOURCES)
#__hp9000__# OBJS = $(KNROBJS)

all: $(TARG)

$(TARG): cflags.rf objs.rf hc.pro $(OBJS) $(LIBS) 
#__dos__#	!if $(HOSTNM) == "dos"
#__dos__#		$(CC) $(OPT) $(LDFLAGS) $(OUT) $(TARG) $(OBJLIST) 
#__dos__#		copy /b $(DOSXN)+$(TARG)$(EXP) $(TARG)$(EXE)
#__dos__#       	$(CFIG) $(TARG) $(CFIGFLAGS)
#__dos__#       !else
			$(LINKC) $(OMFFLAG) $(LDFLAGS) $(OUT) $(TARG) $(OBJLIST) $(LIBS) $(HOSTLIB)
			$(ROMIT) $(TARG)
#__dos__#	!endif

objs.rf:
#__dos__#	!foreach i $(OBJS)
#__dos__#		echo $i >>objs.rf
#__dos__#	!end
#__dos__#	!foreach i $(LIBS) 
#__dos__#		echo -l$i >>objs.rf
#__dos__#	!end
#__win95__#	!foreach i $(OBJS) $(LIBS)
#__win95__#		echo $i >>objs.rf
#__win95__#	!end

cflags.rf:
#__dos__#	!foreach i $(CCFLAGS) $(NOLINK)
#__dos__#		echo $i >>cflags.rf
#__dos__#	!end
#__win95__#	!foreach i $(CCFLAGS) $(NOLINK)
#__win95__#		echo $i >>cflags.rf
#__win95__#	!end

hc.pro:
#__dos__#       $(CP) $(I_DIR)\sys\hc.pro hc.pro
#__win95__#	@echo

info: m4.info

libm4.$(LIB): libobjs.lbc $(LIBOBJS)
	$(AR)
	$(RANLIB)

libobjs.lbc:
#__dos__#	!foreach i $(LIBOBJS)
#__dos__#		echo -add $i >> libobjs.lbc
#__dos__#	!end
#__win95__#	!foreach i $(LIBOBJS)
#__win95__#		echo $i >> libobjs.lbc
#__win95__#	!end

ansi2knr: ansi2knr.c
	$(CC) $(CFLAGS) $(DEFS) -o ansi2knr.o ansi2knr.c
	$(CC) $(LDFLAGS) -o ansi2knr ansi2knr.o
_builtin.c: builtin.c ansi2knr
	./ansi2knr builtin.c > _builtin.c
_debug.c: debug.c ansi2knr
	./ansi2knr debug.c | sed 's/ va_alist;$$//' > _debug.c
_eval.c: eval.c ansi2knr
	./ansi2knr eval.c > _eval.c
_format.c: format.c ansi2knr
	./ansi2knr format.c > _format.c
_input.c: input.c ansi2knr
	./ansi2knr input.c > _input.c
_m4.c: $(HEADERS) m4.c ansi2knr
	./ansi2knr m4.c | sed 's/ va_alist;$$//' > _m4.c
_macro.c: macro.c ansi2knr
	./ansi2knr macro.c > _macro.c
_output.c: output.c ansi2knr
	./ansi2knr output.c > _output.c
_path.c: path.c ansi2knr
	./ansi2knr path.c > _path.c
_symtab.c: symtab.c ansi2knr
	./ansi2knr symtab.c > _symtab.c



#-----------------------------------------------------------------------------
#		'STANDARD' GNU/960 TARGETS BELOW THIS POINT
#-----------------------------------------------------------------------------

ver960.o: FORCE
	$(RM) ver960.c
	echo static char gnu960_ver[]=	 		 > ver960.c
	echo "	\"$(TARGNAME) `cat _version`, `date`\";"	>> ver960.c
	echo \#include \"ver960.h\"			>> ver960.c
	$(CC) $(CFLAGS) ver960.c

# DOS version
ver960.obj: FORCE
	$(RM) ver960.c
	echo static char gnu960_ver[]=	 	 > ver960.c
	=$(LDIR)/verstr $(TARGNAME) _version	>> ver960.c
	echo \#include "ver960.h"		>> ver960.c
	$(CC) $(CFLAGS) ver960.c

# Dummy target to force execution of dependent targets.
#
FORCE:


# 'G960BASE' will be defined at invocation
install:
	make $(TARG) LDIR=$(LDIR) OPT="$(IOPT)" DOSXP=$(DOSXP) DOSXN=$(DOSXN)
	-$(STRIP) $(TARG)$(EXE)
	(cd $(DEST); $(RM) $(TARG)$(EXE))
	$(CP) $(TARG)$(EXE) $(DEST)
#__dos__#	(cd $(DEST); $(RM) $(TARG)$(EXP))
#__dos__#	$(CP) $(TARG)$(EXP) $(DEST)

install_ctools:
	make install

# Separate lines required in order for DOS version to work
#
clean:
	$(RM) $(TARG)$(EXE)
	$(RM) *.$O
	$(RM) core
	$(RM) ansi2knr
	$(RM) libm4.$(LIB)
	$(RM) _*.c		# for ansi platforms
	$(RM) *.rf		# for DOS, doesn't hurt anybody else
	$(RM) *.lbc		# for DOS, doesn't hurt anybody else
	$(RM) *.rex		# for DOS, doesn't hurt anybody else
	$(RM) *.exp		# for DOS, doesn't hurt anybody else


#-----------------------------------------------------------------------------
# Target to uncomment host-specific lines in this makefile, i.e. lines
# beginning in column 1 with the following string:  #__<hostname>__# .
# Original Makefile is backed up as 'Makefile.old'.
#
# Invoke with:  make make HOST=xxx
#-----------------------------------------------------------------------------
make:
	-@grep -s "^#The next line was generated by 'make make'" Makefile; \
	if test $$? = 0 ; then	\
		echo "Makefile has already been processed with 'make make'";\
		exit 1; \
	elif test $(HOST)x = x ; then \
		echo 'Specify "make make HOST=???"'; \
		exit 1; \
	else \
		mv -f Makefile Makefile.old; \
		echo "#The next line was generated by 'make make'"> Makefile;\
		echo "HOST=$(HOST)"				 >> Makefile; \
		echo						 >> Makefile; \
		sed "s/^#__$(HOST)__#//" < Makefile.old		 >> Makefile; \
		if test $(HOST) = dos; then mv Makefile makefile; fi \
	fi
