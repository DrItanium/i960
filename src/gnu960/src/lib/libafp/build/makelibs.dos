#*******************************************************************************
# 
# Copyright (c) 1993 Intel Corporation
# 
# Intel hereby grants you permission to copy, modify, and distribute this
# software and its documentation.  Intel grants this permission provided
# that the above copyright notice appears in all copies and that both the
# copyright notice and this permission notice appear in supporting
# documentation.  In addition, Intel grants this permission provided that
# you prominently mark as "not part of the original" any modifications
# made to this software or documentation, and that the name of Intel
# Corporation not be used in advertising or publicity pertaining to
# distribution of the software or the documentation without specific,
# written prior permission.
# 
# Intel Corporation provides this AS IS, WITHOUT ANY WARRANTY, EXPRESS OR
# IMPLIED, INCLUDING, WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY
# OR FITNESS FOR A PARTICULAR PURPOSE.  Intel makes no guarantee or
# representations regarding the use of, or the results of the use of,
# the software and documentation in terms of correctness, accuracy,
# reliability, currentness, or otherwise; and you rely on the software,
# documentation and results solely at your own risk.
#
# IN NO EVENT SHALL INTEL BE LIABLE FOR ANY LOSS OF USE, LOSS OF BUSINESS,
# LOSS OF PROFITS, INDIRECT, INCIDENTAL, SPECIAL OR CONSEQUENTIAL DAMAGES
# OF ANY KIND.  IN NO EVENT SHALL INTEL'S TOTAL LIABILITY EXCEED THE SUM
# PAID TO INTEL FOR THE PRODUCT LICENSED HEREUNDER.
# 
#*******************************************************************************

MK		= $(MAKE) -f makelibs.dos IC=$(IC)

%if "$(IC)" == ""
	IC	= gcc960
%endif

LIB_DEBUG	=
X960BASE		=
%if $(IC) == gcc960
	AR	= gar960
	AS	= gas960e
	OPT	= -O4 $(LIB_DEBUG) -fsigned-char -mic3.0-compat -mstrict-align -mpic
	X960BASE	= $(G960BASE)
%elif $(IC) == ic960
	AR	= arc960
	AS	= gas960e
	OPT	= -O2 $(LIB_DEBUG) -Wc,-mstrict-align -Gpc
	X960BASE	= $(I960BASE)
%else
%	abort "IC must be ic960 or gcc960"
%endif

%if "$(X960BASE)" == ""
%	abort "Define I960BASE for ic960 or G960BASE for gcc960"
%endif

LIB_INSTALL	=
%if "$(LIB_INSTALL)" == ""
	LIB_INSTALL=$(X960BASE)\lib
%endif

IDIR		= -I$(X960BASE)\src\include
EXTRACT		= $(AR) -xo
FORMAT		= -Felf
EXTRA		=
CFLAGS		= $(ARCH) $(OPT) $(FORMAT) $(EXTRA) $(IDIR) $(VERB)
AS_OPT		=
ASFLAGS		= $(ARCH) $(AS_OPT)
ARFLAGS		= -r
VERB		=

OBJS =  addtf3.o afpnand.o afpnans.o afpnant.o afprrcd.o afprrcs.o \
	afprrct.o cmpdf2.o cmpsf2.o \
	cmptf2.o divtf3.o environ.o extdftf.o extsfdf.o extsftf.o \
	faultind.o faultins.o faultint.o faultiod.o faultios.o faultiot.o \
	faultovd.o faultovs.o faultovt.o faultred.o faultres.o faultret.o \
	faultund.o faultuns.o faultunt.o faultzdd.o faultzds.o faultzdt.o \
	fixdfsi.o fixsfsi.o fixtfsi.o fltsidf.o fltsisf.o fltsitf.o \
	logbdf2.o logbsf2.o logbtf2.o multf3.o opndf3.o opnsf3.o \
	remdf3.o remsf3.o remtf3.o rnddfsi.o rndsfsi.o rndtfsi.o rndudfsi.o \
	rndusfsi.o rndutfsi.o rounddf2.o roundsf2.o roundtf2.o scaledf.o \
	scalesf.o scaletf.o trndfsf.o trntfdf.o trntfsf.o trng960.o

.PRECIOUS:	lhka.a lhca.a lhjx.a lhkap.a lhcap.a lhjxp.a \
                lhcab.a lhjxb.a lhcae.a lhjxe.a

.SUFFIXES:
.SUFFIXES:	.o .as .c

.as.o:
	copy $< temp.c
	$(IC) @<<
	-E $(CFLAGS) temp.c
	<< ECHO > temp.s
	$(AS) -j1 $(ASFLAGS) -o $*.o temp.s
	@del temp.c
	@del temp.s

.c.o:
	$(IC) @<<
	-c -j1 $(CFLAGS) $<
	<< ECHO

all:
	$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB)\
		lib_elf_ca  lib_elf_jx  lib_elf_ka \
		lib_elf_cap  lib_elf_jxp  lib_elf_kap \
		lib_elf_cab lib_elf_jxb \
		lib_elf_cae lib_elf_jxe

install: all
	%if ! %dir($(LIB_INSTALL))
		mkdir $(LIB_INSTALL)
	%endif
	copy lhca.a	$(LIB_INSTALL)\libhca.a
	copy lhjx.a	$(LIB_INSTALL)\libhjx.a
	copy lhka.a	$(LIB_INSTALL)\libhka.a
	copy lhcap.a	$(LIB_INSTALL)\libhca_p.a
	copy lhjxp.a	$(LIB_INSTALL)\libhjx_p.a
	copy lhkap.a	$(LIB_INSTALL)\libhka_p.a
	copy lhcab.a	$(LIB_INSTALL)\libhca_b.a
	copy lhjxb.a	$(LIB_INSTALL)\libhjx_b.a
	copy lhcae.a	$(LIB_INSTALL)\libhca_e.a
	copy lhjxe.a	$(LIB_INSTALL)\libhjx_e.a
	%if %dir($(LIB_INSTALL)\libbout)
	copy lhca.a	$(LIB_INSTALL)\libbout\libhgca.a
	copy lhjx.a	$(LIB_INSTALL)\libbout\libhgjx.a
	copy lhka.a	$(LIB_INSTALL)\libbout\libhgka.a
	%endif
	%if %dir($(LIB_INSTALL)\libcoff)
	copy lhca.a	$(LIB_INSTALL)\libcoff\libhgca.a
	copy lhjx.a	$(LIB_INSTALL)\libcoff\libhgjx.a
	copy lhka.a	$(LIB_INSTALL)\libcoff\libhgka.a
	%endif
	%if %dir($(LIB_INSTALL)\libcfbe)
	copy lhcab.a	$(LIB_INSTALL)\libcfbe\libhgca.a
	copy lhjxb.a	$(LIB_INSTALL)\libcfbe\libhgjx.a
	%endif

objects:
	if exist *.o del *.o
	%if %file($(LIB))
		$(EXTRACT) $(LIB)
	%endif

lib_elf_ca:
	$(MK) LIB=lhca.a objects
	%if $(IC) == gcc960
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA=-mpid-safe ARCH=-ACA lhca.a
	%else
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA=-Gpr ARCH=-ACA lhca.a
	%endif

lib_elf_cap:
	$(MK) LIB=lhcap.a objects
	%if $(IC) == gcc960
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA=-mpid ARCH=-ACA lhcap.a
	%else
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA=-Gpd ARCH=-ACA lhcap.a
	%endif

lib_elf_jx:
	$(MK) LIB=lhjx.a objects
	%if $(IC) == gcc960
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA=-mpid-safe ARCH=-ACA lhjx.a
	%else
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA=-Gpr ARCH=-ACA lhjx.a
	%endif

lib_elf_jxp:
	$(MK) LIB=lhjxp.a objects
	%if $(IC) == gcc960
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA=-mpid ARCH=-ACA lhjxp.a
	%else
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA=-Gpd ARCH=-ACA lhjxp.a
	%endif

lib_elf_ka:
	$(MK) LIB=lhka.a objects
	%if $(IC) == gcc960
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA=-mpid-safe ARCH=-AKA lhka.a
	%else
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA=-Gpr ARCH=-AKA lhka.a
	%endif

lib_elf_kap:
	$(MK) LIB=lhkap.a objects
	%if $(IC) == gcc960
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA=-mpid ARCH=-AKA lhkap.a
	%else
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA=-Gpd ARCH=-AKA lhkap.a
	%endif

lib_elf_cab:
	$(MK) LIB=lhcab.a objects
	%if $(IC) == gcc960
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA="-mpid-safe -G" ARCH=-ACA AS_OPT=-G lhcab.a
	%else
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA=-Gpr,be ARCH=-ACA AS_OPT=-G lhcab.a
	%endif

lib_elf_jxb:
	$(MK) LIB=lhjxb.a objects
	%if $(IC) == gcc960
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA="-mpid-safe -G" ARCH=-ACA AS_OPT=-G lhjxb.a
	%else
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA=-Gpr,be ARCH=-ACA AS_OPT=-G lhjxb.a
	%endif

lib_elf_cae:
	$(MK) LIB=lhcae.a objects
	%if $(IC) == gcc960
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA="-mpid -G" ARCH=-ACA AS_OPT=-G lhcae.a
	%else
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA=-Gpd,be ARCH=-ACA AS_OPT=-G lhcae.a
	%endif

lib_elf_jxe:
	$(MK) LIB=lhjxe.a objects
	%if $(IC) == gcc960
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA="-mpid -G" ARCH=-ACA AS_OPT=-G lhjxe.a
	%else
		$(MK) LIB_DEBUG=$(LIB_DEBUG) VERB=$(VERB) EXTRA=-Gpd,be ARCH=-ACA AS_OPT=-G lhjxe.a
	%endif

lhka.a lhca.a lhjx.a lhkap.a lhcap.a lhjxp.a lhcab.a lhjxb.a lhcae.a lhjxe.a:  $(OBJS)
	$(AR) @<<
	$(ARFLAGS) $@ $(.SOURCES)
	<<
	if exist *.o del *.o

clean:
	if exist *.a del *.a
	if exist *.o del *.o

