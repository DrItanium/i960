#-----------------------------------------------------------------------------
#		Makefile for Intel 960 GNU C compiler
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Copyright (C) 1987, 1988 Free Software Foundation, Inc.
#
# THIS FILE HAS BEEN ADAPTED FOR THE INTEL GNU/960 DISTRIBUTION BY INTEL CORP.
#
# This file is part of GNU CC.
#
# GNU CC is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 1, or (at your option)
# any later version.
#
# GNU CC is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
#-----------------------------------------------------------------------------

.SUFFIXES:
.SUFFIXES: .o .c

HOST_CONFIG	=

# Essential under System V, harmless elsewhere
SHELL	= /bin/sh
MK	=make $(MAKEMIN) SNAPSHOT=$(SNAPSHOT)

# G960BASE should be defined at 'install' invocation
CXXFLAGS=
IDIR	= ../../include
LDIR	= $(G960BASE)/lib
XCFLAGS	= -DIMSTG -DCROSS_COMPILE -DGCC20
CFLAGS_NOOPT = -I$(IDIR) $(HOSTDEFS) $(XCFLAGS)
CFLAGS	= $(OPT) $(CFLAGS_NOOPT) $(CXXFLAGS)
MALLOC  =
CCINFO	= $(LDIR)/cc_info.a

# ADMIN is needed only for snapshot verification
ADMIN=../../../admin

GCC960_VER	= 2.4
GCC960_VER_MAC	= 204
IC960_VER	= 4.5
IC960_VER_MAC	= 405

#-----------  DEFAULTS  ---------------------------
O	= o
RM	= rm -f
CP	= cp
LN	= ln -s
STRIP	= strip
OPT	= -g
IOPT	= -O
OUT	= -o
HOSTNM	= \"$(HOST)\"
BINDEST	= $(G960BASE)/bin
LIBDEST	= $(G960BASE)/lib
WHOAMI	= whoami
SNAPSHOT= 0
MAKEMIN	=

CC1	= cc1.960
CC1PLUS	= cc1plus.960
CPP	= cpp.960


#-----------------------------------------------------------------------------
# PORTING NOTES
#
# If host system has alloca() in /lib/libPW.a, add the following line:
#	HOSTLIBS	= -lPW
#
# On a pyramid, add the following line:
#	HOSTLIBS= -lalloca
#
# If host system doesn't have a working alloca() in any of the standard
# libraries, add the following line:
#	ALLOCA	= alloca.$O
#-----------------------------------------------------------------------------


#-----------------------------------------------------------------------------
#               Uncomment for vax-ultrix
#__vax-ultrix__#HOST_CONFIG	= xm-vax.h
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#               Uncomment for Dec 2100 and 3100
#__dec3100__#ALLOCA	= alloca.$O
#__dec3100__#HOST_CONFIG	= xm-mips.h
#-----------------------------------------------------------------------------
#-----------------------------------------------------------------------------
#               Uncomment for Apollo 400
#__ap400__#HOSTDEFS	= -A nansi
#__ap400__#IOPT		= -g
#__ap400__#HOST_CONFIG	= xm-m68k.h
#-----------------------------------------------------------------------------
#		Uncomment for Hewlett-Packard 9000 series 300 / HPUX
#__hp9000__#HOSTDEFS	=
#__hp9000__#ALLOCA	= alloca.$O
#__hp9000__#HOSTLIBS	= -lPW
#__hp9000__#HOST_CONFIG = xm-hp320.h
#-----------------------------------------------------------------------------
#		Uncomment for Hewlett-Packard 9000 series 700 / HPUX
# -Wp,-Hnum bumps the size of a cpp macro table.  We exceed the default limit.
#__hp700__#HOSTDEFS	=-Wp,-H200000
#__hp700__#ALLOCA	= alloca.$O
#__hp700__#HOST_CONFIG	= xm-pahpux.h
# Next line allows better debugging by passing -g to linker
#__hp700__#LDFLAGS	=$(OPT)
#-----------------------------------------------------------------------------
#		Uncomment for Intel 386 / System V
#__i386v__#HOSTLIBS	= -lPW
#__i386v__#LN		= ln
#__i386v__#WHOAMI	= logname
#__i386v__#HOST_CONFIG	= xm-i386v.h
#-----------------------------------------------------------------------------
#		Uncomment for Intel 386 / System V Release 4
#__i386vr4__#ALLOCA	= alloca.$O
#__i386vr4__#LN		= ln
#__i386vr4__#WHOAMI	= logname
#__i386vr4__#HOST_CONFIG	= xm-i38v4.h
#-----------------------------------------------------------------------------
#		Uncomment for IBM RS6000
#__rs6000__#HOSTDEFS	= -DPOSIX -D_NO_PROTO -qchars=signed
#__rs6000__#LDFLAGS	= -b nodelcsect -lm
#__rs6000__#ALLOCA	= alloca.$O
#__rs6000__#HOST_CONFIG	= xm-rs6000.h
#-----------------------------------------------------------------------------
#		Uncomment for Sun 3
#__sun3__#LDFLAGS	= -Bstatic
#__sun3__#HOST_CONFIG	= xm-m68k.h
#-----------------------------------------------------------------------------
#		Uncomment for Sun 386i
#__sun386i__#LDFLAGS	= -Bstatic
#__sun386i__#HOSTDEFS	=
#__sun386i__#HOST_CONFIG	= xm-sun386.h
#-----------------------------------------------------------------------------
#		Uncomment for Sun 4
#__sun4__#LDFLAGS	= -Bstatic
#__sun4__#IOPT		= -O2
#__sun4__#HOST_CONFIG	= xm-sparc.h
#-----------------------------------------------------------------------------
#		Uncomment for Solaris on the sun4 (sol-sun4).
#__sol-sun4__#LDFLAGS = -Bstatic
#__sol-sun4__#IOPT    = -O2
#__sol-sun4__#HOST_CONFIG     = xm-spcv4.h
#-----------------------------------------------------------------------------
#		Uncomment for NCR Tower 68020 / System V
#__68020v__#HOSTDEFS	=
#__68020v__#IOPT	= -O0
#__68020v__#ALLOCA	= alloca.$O
#__68020v__#HOSTLIBS	= -lPW
#__68020v__#LN		= ln
#__68020v__#WHOAMI	= logname
#__68020v__#HOST_CONFIG = xm-tower.h
#-----------------------------------------------------------------------------
#		Uncomment for DOS
#__dos__#O		= obj
#__dos__#EXE		= .exe
#__dos__#RM		= del
#__dos__#ALLOCA		= alloca.$O
#__dos__#CP		= copy
#__dos__#LN		= copy
#__dos__#STRIP		= echo	# no-op
#__dos__#HOSTDEFS	= -DDOS -DUSG
#__dos__#OPT		= -g -O0 -zfloatsync
#__dos__#IOPT		=
#__dos__#LDFLAGS	= -s0100000h
#__dos__#OUT		= -e
#__dos__#BINDEST	= $(G960BASE,/=\)\bin
#__dos__#LIBDEST	= $(G960BASE,/=\)\lib
#__dos__#HOSTNM		= "'\"dos\"'"
#__dos__#CC1		= cc1.exe
#__dos__#CC1PLUS	= cc1plus.exe
#__dos__#CPP		= cpp.exe
#__dos__#HOST_CONFIG	= unknown.h
#__dos__#MAKEMIN	= -m
#-----------------------------------------------------------------------------

.c.$O:
	$(CC) -c $(CFLAGS) $<

# The files that "belong" in CONFIG_H (machine description files) are
# deliberately omitted because they would cause complete recompilation every
# time one of them is editted.  If that's what you want, just delete all
# the object files.
# Changed the default to always include them on 11/05/91.  If you
# want to risk hanging yourself, change your local copy of the makefile.
CONFIG_H	= config.h tm.h hconfig.h tconfig.h i_copreg.h

RTL_H	= rtl.h i_rtl.h rtl.def machmode.def
TREE_H	= tree.h i_tree.h real.h tree.def machmode.def
CPLUS_TREE_H = $(TREE_H) cp-tree.h cp-tree.def
BYTECODE_H = bytecode.h bc-emit.h bc-optab.h

CONFIG960= md tm.h config.h aux-output.c

# Libraries other than host system libraries
TOOLIB	= $(LDIR)/toolib.a
LIBDEPS	= $(ALLOCA) obstack.$O $(TOOLIB)

LIBS	= $(LIBDEPS) $(HOSTLIBS)
C_OBJS	= c-parse.$O c-lang.$O c-lex.$O c-decl.$O c-typeck.$O c-convert.$O\
	c-aux-info.$O i_c_misc1.$O c-iterate.$O i_asm_func.$O\
	c-common.$O aux-output.$O toplev.$O i_lister.$O calls.$O

CP_OBJS = cp-parse.$O cp-decl.$O cp-decl2.$O cp-typeck.$O cp-type2.$O\
	cp-tree.$O cp-ptree.$O cp-cvt.$O cp-search.$O cp-lex.$O cp-gc.$O\
	cp-call.$O cp-class.$O cp-init.$O cp-method.$O cp-except.$O cp-expr.$O\
	cp-pt.$O cp-edsel.$O cp-xref.$O cp-spew.$O cp-error.$O cp-errfn.$O\
	i_cp_misc1.$O cp-sig.$O\
	c-common-cp.$O aux-output-cp.$O toplev-cp.$O i_lister-cp.$O calls-cp.$O

OBJS	= caller-save.$O cse.$O dbxout.$O emit-rtl.$O explow.$O expmed.$O\
	expr.$O final.$O fold-const.$O flow.$O function.$O global.$O getpwd.$O\
	insn-attrtab.$O insn-emit.$O insn-extract.$O insn-output.$O\
	insn-peep.$O insn-recog.$O insn-opinit.$O integrate.$O jump.$O\
	local-alloc.$O loop.$O optabs.$O print-rtl.$O print-tree.$O recog.$O\
	regclass.$O reload.$O reload1.$O rtl.$O rtlanal.$O sched.$O sdbout.$O\
	stor-layout.$O stmt.$O stupid.$O tree.$O unroll.$O varasm.$O version.$O\
	convert.$O real.$O dwarfout.$O i_cnstfix.$O i_cnstprop.$O\
	i_cndxfm.$O i_cp_prop.$O i_dataflow.$O i_forw_prop.$O\
	i_df_align.$O i_coerce.$O i_df_set.$O i_double.$O i_expect.$O\
	i_sched.$O i_glob_db.$O i_glob_inl.$O i_graph.$O i_list.$O i_misc1.$O\
	i_mrd_info.$O i_pic.$O i_profile.$O i_prof_form.$O i_bbr.$O i_sblock.$O\
	i_shadow.$O i_shadow2.$O i_symwalk.$O  i_deadelim.$O i_input.$O combine.$O\
	i_dwarf2.$O cc_dinfo.$O cc_linfo.$O i_size.$O

# Files specific to the C interpreter bytecode compiler(s).
BC_OBJS = bc-emit.$O bc-optab.$O

CC1OBJS	= $(C_OBJS) $(OBJS) $(BC_OBJS)
CC1OBJ	= $(C_OBJS) $(OBJS) $(BC_OBJS)
CC1PLUS_OBJS	= $(CP_OBJS) $(OBJS) $(BC_OBJS)
#__dos__#CC1OBJ = @objs.rf

all: gcc960$(EXE) ic960$(EXE) $(CC1PLUS) $(CC1) $(CPP)

$(CPP): $(CONFIG960) cccp.$O cexp.$O version.$O $(LIBDEPS) $(CCINFO) _version
	$(MK) ver960.$O TOOL=$(CPP)
	$(CC) $(OUT) $(CPP) $(LDFLAGS) $(MALLOC) cccp.$O cexp.$O version.$O ver960.$O $(CCINFO) $(LIBS)

gcc960$(EXE): $(CONFIG960) gcc960.$O version.$O $(LIBDEPS) $(CCINFO) _version
	$(MK) ver960.$O TOOL=gcc960
	$(CC) $(OUT) gcc960 $(LDFLAGS) $(MALLOC) gcc960.$O version.$O ver960.$O $(CCINFO) $(LIBS)

ic960$(EXE): $(CONFIG960) i_ic960.$O ver960.$O $(CCINFO) $(TOOLIB)
	$(CC) $(OUT) ic960 $(LDFLAGS) i_ic960.$O ver960.$O $(CCINFO) $(TOOLIB)

$(CC1): $(CONFIG960) $(CC1OBJS) $(LIBDEPS) $(CCINFO) _version objs.rf
	$(MK) ver960.$O TOOL=$(CC1)
	$(CC) $(OUT) $(CC1) $(LDFLAGS) $(MALLOC) $(CC1OBJ) ver960.$O $(CCINFO) $(LIBS)

$(CC1PLUS): $(CONFIG960) $(CC1PLUS_OBJS) $(LIBDEPS) $(CCINFO) _version objs.rf
	$(MK) ver960.$O TOOL=$(CC1PLUS)
	$(CC) $(OUT) $(CC1PLUS) $(LDFLAGS) $(MALLOC) $(CC1PLUS_OBJS) ver960.$O $(CCINFO) $(LIBS)

objs.rf:
#__dos__#	del objs.rf
#__dos__#	!foreach i $(OBJS)
#__dos__#		echo $i >>objs.rf
#__dos__#	!end


#-----------------------------------------------------------------------------

cccp.$O: $(CONFIG_H)

md:		i960.md;	($(RM) md; $(LN) i960.md md)
tm.h:		i960.h;		($(RM) tm.h; $(LN) i960.h tm.h)
config.h:	$(HOST_CONFIG);	($(RM) config.h; $(LN) $(HOST_CONFIG) config.h)
hconfig.h:	$(HOST_CONFIG);	($(RM) hconfig.h; $(LN) $(HOST_CONFIG) hconfig.h)
tconfig.h:	xm-i960.h;	($(RM) tconfig.h; $(LN) xm-i960.h tconfig.h)
aux-output.c:	i960.c;		($(RM) aux-output.c; $(LN) i960.c aux-output.c)

#-----------------------------------------------------------------------------
# GRAMMAR
#       The grammar should rarely or never change, so we build from the
#       .c files rather than the corresponding .y files.  In fact, some hosts
#       (DOS) don't even have yacc/bison, so we *have* to build from C files
#	there.  If the grammar *does* change, the target 'update_grammar'
#	should be invoked manually to rebuild the .c files.
#-----------------------------------------------------------------------------
BISON	= bison
BISONFLAGS = -v

# Disable any built-in yacc rules
.y.$O: ;
.y.c: ;

update_cpp_grammar: FORCE
	$(BISON) -o cexp.c cexp.y

update_c_grammar: FORCE
	(BISON_SIMPLE=bison.our; export BISON_SIMPLE; $(BISON) -o c-parse.c $(BISONFLAGS) -d c-parse.y)

update_cplus_grammar: FORCE
	(BISON_SIMPLE=bison.our; export BISON_SIMPLE; $(BISON) $(BISONFLAGS) -d -o cp-parse.c cp-parse.y)
	grep '^#define[ 	]*YYEMPTY' cp-parse.c >>cp-parse.h


#-----------------------------------------------------------------------------
# SOURCE FILES GENERATED FROM THE MACHINE DESCRIPTION
#-----------------------------------------------------------------------------

.PRECIOUS:	insn-attr.h insn-codes.h insn-config.h insn-flags.h \
		bc-opcode.h bc-opname.h bc-arity.h \
		insn-attrtab.c insn-emit.c insn-recog.c insn-extract.c \
		insn-opinit.c insn-output.c insn-peep.c i_copreg.h

MVIFCHG	= sh mvifchg
#__dos__#MVIFCHG = =copy

sources:
	make insn-attr.h insn-codes.h insn-config.h insn-flags.h \
		bc-opcode.h bc-opname.h bc-arity.h \
		insn-attrtab.c insn-emit.c insn-recog.c insn-extract.c \
		insn-opinit.c insn-output.c insn-peep.c

# Each pair of rules has this effect:
# genXXX is run only if the md has changed since genXXX was last run;
# but the file insn-XXX.X is touched only when its contents actually change.

insn-attr.h: md genattr$(EXE)
	./genattr md > tmp.tmp
	$(MVIFCHG) tmp.tmp insn-attr.h

insn-codes.h: md gencodes$(EXE)
	./gencodes md > tmp.tmp
	$(MVIFCHG) tmp.tmp insn-codes.h

insn-config.h: md genconfig$(EXE)
	./genconfig md > tmp.tmp
	$(MVIFCHG) tmp.tmp insn-config.h

insn-flags.h: md genflags$(EXE)
	./genflags md > tmp.tmp
	$(MVIFCHG) tmp.tmp insn-flags.h
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
bc-arity.h: bytecode.def bi-arity$(EXE)
	./bi-arity < bytecode.def > tmp.tmp
	$(MVIFCHG) tmp.tmp bc-arity.h

bc-opcode.h: bytecode.def bi-opcode$(EXE)
	./bi-opcode < bytecode.def > tmp.tmp
	$(MVIFCHG) tmp.tmp bc-opcode.h

bc-opname.h: bytecode.def bi-opname$(EXE)
	./bi-opname < bytecode.def > tmp.tmp
	$(MVIFCHG) tmp.tmp bc-opname.h
# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

insn-attrtab.c: md genattrtab$(EXE)
	./genattrtab md > tmp.tmp
	$(MVIFCHG) tmp.tmp insn-attrtab.c

insn-attrtab.$O:insn-attrtab.c \
		$(CONFIG_H) $(RTL_H) insn-config.h recog.h \
		regs.h real.h output.h insn-attr.h

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

insn-emit.c: genemit$(EXE) md
	./genemit md > tmp.tmp
	$(MVIFCHG) tmp.tmp insn-emit.c

insn-emit.$O:	insn-emit.c \
		$(CONFIG_H) $(RTL_H) expr.h real.h output.h \
		insn-config.h insn-flags.h insn-codes.h

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

insn-extract.c: genextract$(EXE) md
	./genextract md > tmp.tmp
	$(MVIFCHG) tmp.tmp insn-extract.c

insn-extract.$O:insn-extract.c \
		$(CONFIG_H) $(RTL_H)

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

insn-opinit.c: genopinit$(EXE) md
	./genopinit md > tmp.tmp
	$(MVIFCHG) tmp.tmp insn-opinit.c

insn-opinit.$O: insn-opinit.c \
		$(CONFIG_H) $(RTL_H) insn-codes.h insn-flags.h \
		insn-config.h flags.h rtl.h recog.h expr.h reload.h

insn-output.c: genoutput$(EXE) md
	./genoutput md > tmp.tmp
	$(MVIFCHG) tmp.tmp insn-output.c

i_copreg.h: genreg$(EXE)
	./genreg

#
# Explicitly turn off optimization for insn-output when compiling on the
# sun386i host.  It emits a bad assembler file when this is done -O.
#
insn-output.$O:	insn-output.c \
		$(CONFIG_H) $(RTL_H) regs.h hard-reg-set.h real.h \
		insn-config.h conditions.h insn-flags.h insn-attr.h \
		insn-codes.h recog.h output.h
#__sun386i__#	$(CC) -g -c -I$(IDIR) $(HOSTDEFS) $(XCFLAGS) insn-output.c	
#__rs6000__#	$(CC) -g -c -I$(IDIR) $(HOSTDEFS) $(XCFLAGS) insn-output.c	

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

insn-peep.c: genpeep$(EXE) md
	./genpeep md > tmp.tmp
	$(MVIFCHG) tmp.tmp insn-peep.c

insn-peep.$O:	insn-peep.c \
		$(CONFIG_H) $(RTL_H) regs.h output.h real.h

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

insn-recog.c: genrecog$(EXE) md
	./genrecog md > tmp.tmp
	$(MVIFCHG) tmp.tmp insn-recog.c

insn-recog.$O:	insn-recog.c \
		$(CONFIG_H) $(RTL_H) insn-config.h recog.h real.h \
		output.h flags.h

# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


#-----------------------------------------------------------------------------
# PROGRAMS THAT GENERATE THE ABOVE SOURCE FILES
#-----------------------------------------------------------------------------

GEN=	genattr$(EXE) genattrtab$(EXE) genconfig$(EXE) gencodes$(EXE) \
	genemit$(EXE) genextract$(EXE) genflags$(EXE) genoutput$(EXE) \
	genpeep$(EXE) genrecog$(EXE) genopinit$(EXE) \
	bi-arity$(EXE) bi-opcode$(EXE) bi-opname$(EXE) genreg$(EXE)

CLEANGEN= rm -f $(GEN)
# DOS del can't handle multiple command line arguments!
#__dos__#CLEANGEN= del gen*.exe del bi*.exe

gen: $(GEN)

genattr$(EXE):		genattr.$O rtl.$O $(LIBDEPS)
	$(CC) $(OUT) genattr $(LDFLAGS) $(MALLOC)  genattr.$O rtl.$O $(LIBS)

genattrtab$(EXE):	genattrtab.$O rtl.$O rtlanal.$O print-rtl.$O $(LIBDEPS)
	$(CC) $(OUT) genattrtab $(LDFLAGS) $(MALLOC) genattrtab.$O rtl.$O rtlanal.$O print-rtl.$O $(LIBS)

genconfig$(EXE):	genconfig.$O rtl.$O $(LIBDEPS)
	$(CC) $(OUT) genconfig $(LDFLAGS) $(MALLOC) genconfig.$O rtl.$O $(LIBS)

gencodes$(EXE):		gencodes.$O rtl.$O $(LIBDEPS)
	$(CC) $(OUT) gencodes $(LDFLAGS) $(MALLOC) gencodes.$O rtl.$O $(LIBS)

genemit$(EXE):		genemit.$O rtl.$O $(LIBDEPS)
	$(CC) $(OUT) genemit $(LDFLAGS) $(MALLOC) genemit.$O rtl.$O $(LIBS)

genextract$(EXE):	genextract.$O rtl.$O $(LIBDEPS)
	$(CC) $(OUT) genextract $(LDFLAGS) $(MALLOC) genextract.$O rtl.$O $(LIBS)

genflags$(EXE):		genflags.$O rtl.$O $(LIBDEPS)
	$(CC) $(OUT) genflags $(LDFLAGS) $(MALLOC) genflags.$O rtl.$O $(LIBS)

genoutput$(EXE):	genoutput.$O rtl.$O $(LIBDEPS)
	$(CC) $(OUT) genoutput $(LDFLAGS) $(MALLOC) genoutput.$O rtl.$O $(LIBS)

genpeep$(EXE):		genpeep.$O rtl.$O $(LIBDEPS)
	$(CC) $(OUT) genpeep $(LDFLAGS) $(MALLOC) genpeep.$O rtl.$O $(LIBS)

genrecog$(EXE):		genrecog.$O rtl.$O $(LIBDEPS)
	$(CC) $(OUT) genrecog $(LDFLAGS) $(MALLOC) genrecog.$O rtl.$O $(LIBS)

genopinit$(EXE):	genopinit.$O rtl.$O $(LIBDEPS)
	$(CC) $(OUT) genopinit $(LDFLAGS) $(MALLOC) genopinit.$O rtl.$O $(LIBS)

genreg$(EXE):	genreg.$O $(LIBDEPS)
	$(CC) $(OUT) genreg $(LDFLAGS) $(MALLOC) genreg.$O

BI_OBJ=bi-parser.$O bi-lexer.$O bi-reverse.$O

bi-arity$(EXE):		bi-arity.$O $(BI_OBJ) $(HOST_LIBDEPS)
	$(CC) $(OUT) bi-arity $(LDFLAGS) $(MALLOC) bi-arity.$O $(BI_OBJ) $(LIBS)

bi-opcode$(EXE):		bi-opcode.$O $(BI_OBJ) $(HOST_LIBDEPS)
	$(CC) $(OUT) bi-opcode $(LDFLAGS) $(MALLOC) bi-opcode.$O $(BI_OBJ) $(LIBS)

bi-opname$(EXE):		bi-opname.$O $(BI_OBJ) $(HOST_LIBDEPS)
	$(CC) $(OUT) bi-opname $(LDFLAGS) $(MALLOC) bi-opname.$O $(BI_OBJ) $(LIBS)

#-----------------------------------------------------------------------------
# INCLUDE FILE DEPENDENCIES
#-----------------------------------------------------------------------------
expr.h:		insn-codes.h

obstack.$O:	obstack.c obstack.h

cccp.$O:	cccp.c $(IDIR)/gnudos.h i_lutil.def i_lutil.h
#__sol-sun4__#	$(CC) -g -c $(CFLAGS_NOOPT) cccp.c

cexp.$O:	cexp.c $(CONFIG_H)

gcc960.$O:	gcc960.c $(IDIR)/gnudos.h obstack.h tm.h

i_ic960.$O:	i_ic960.c i_icopts.def $(CONFIG_H) $(IDIR)/i_toolib.h

#
# $(CONFIG_H) is omitted for gen*.$O because these programs don't really depend
# on anything about the target machine.  They do depend on config.h itself,
# since that describes the host machine.
#
#
# genattr compiled without optimization for i386v because of
# core dump when compiled with optimization.
#
genattr.$O:	genattr.c	$(RTL_H) $(CONFIG_H) obstack.h
#__i386v__#	$(CC) -g -c -I$(IDIR) $(HOSTDEFS) $(XCFLAGS) genattr.c

#
# genattrtab compiled without optimization for i386v because of
# core dump when compiled with optimization.
#
genattrtab.$O:	genattrtab.c	$(RTL_H) $(CONFIG_H) obstack.h insn-config.h
#__i386v__#	$(CC) -g -c -I$(IDIR) $(HOSTDEFS) $(XCFLAGS) genattrtab.c

genconfig.$O:	genconfig.c	$(RTL_H) $(CONFIG_H) obstack.h

gencodes.$O:	gencodes.c	$(RTL_H) $(CONFIG_H) obstack.h

genemit.$O:	genemit.c	$(RTL_H) $(CONFIG_H) obstack.h

genextract.$O:	genextract.c	$(RTL_H) $(CONFIG_H) obstack.h insn-config.h

genflags.$O:	genflags.c	$(RTL_H) $(CONFIG_H) obstack.h

genoutput.$O:	genoutput.c	$(RTL_H) $(CONFIG_H) obstack.h

genpeep.$O:	genpeep.c	$(RTL_H) $(CONFIG_H) obstack.h

genrecog.$O:	genrecog.c	$(RTL_H) $(CONFIG_H) obstack.h

genopinit.$O:	genopinit.c	$(RTL_H) hconfig.h

genreg.$O: genreg.c

bi-run.$O:	bi-run.c bi-run.h bc-typecd.h bc-opname.h bc-arity.h bc-opcode.h
bi-parser.$O:	bi-parser.c bi-defs.h hconfig.h
bi-lexer.$O:	bi-lexer.c bi-parser.h hconfig.h
bi-arity.$O:	bi-arity.c bi-defs.h hconfig.h
bi-opcode.$O:	bi-opcode.c bi-defs.h hconfig.h
bi-opname.$O:	bi-opname.c bi-defs.h hconfig.h
bi-reverse.$O:	bi-reverse.c bi-defs.h

bc-emit.$O : bc-emit.c $(CONFIG_H) $(RTL_H) real.h $(BYTECODE_H) \
	 bc-arity.h bc-opcode.h bc-typecd.h bc-typecd.def bi-run.h bytetypes.h

bc-optab.$O : bc-optab.c $(CONFIG_H) $(REAL_H) $(BYTECODE_H) \
		bc-opcode.h bc-typecd.h bc-typecd.def

c-parse.$O:	c-parse.c \
		i_lutil.h \
		$(CONFIG_H) $(TREE_H) input.h c-lex.h c-tree.h flags.h
#__hp9000__#	$(CC) -c $(CFLAGS_NOOPT) c-parse.c

c-lang.$O:	c-lang.c \
		$(CONFIG_H) $(TREE_H) input.h

c-lex.$O:	c-lex.c \
		i_lister.h i_lutil.h \
		$(CONFIG_H) $(TREE_H) $(RTL_H) \
		input.h c-lex.h c-tree.h flags.h c-parse.h c-gperf.h

c-decl.$O:	c-decl.c \
		i_lutil.h \
		$(CONFIG_H) $(TREE_H) flags.h c-tree.h c-lex.h

c-typeck.$O:	c-typeck.c \
		$(CONFIG_H) $(TREE_H) c-tree.h flags.h

c-convert.$O:	c-convert.c \
		$(CONFIG_H) $(TREE_H) flags.h

c-iterate.$O:	c-iterate.c \
		$(CONFIG_H) $(TREE_H) $(RTL_H) c-tree.h flags.h

c-aux-info.$O:	c-aux-info.c \
		$(CONFIG_H) $(TREE_H) c-tree.h flags.h

c-common.$O:	c-common.c \
		$(CONFIG_H) $(TREE_H) c-tree.h flags.h c-lex.h input.h

c-common-cp.$O:	c-common.c \
		$(CONFIG_H) $(TREE_H) c-tree.h flags.h c-lex.h input.h
	$(CC) -c $(CFLAGS) -DIMSTG_CPLUSPLUS -o c-common-cp.$O c-common.c

# C++ language specific files.

cp-parse.$O : cp-parse.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h cp-lex.h
	$(CC) -c $(CFLAGS) -DYYDEBUG=1 -DDEBUG_LISTING=1 -DIMSTG_CPLUSPLUS cp-parse.c

cp-spew.$O : cp-spew.c $(CONFIG_H) $(CPLUS_TREE_H) cp-parse.h flags.h cp-lex.h
	$(CC) -c $(CFLAGS) -DIMSTG_CPLUSPLUS cp-spew.c

cp-lex.$O : cp-lex.c $(CONFIG_H) $(CPLUS_TREE_H) cp-parse.h cp-input.c\
		flags.h cp-hash.h cp-lex.h
	$(CC) -c $(CFLAGS) -DIMSTG_CPLUSPLUS cp-lex.c

cp-decl.$O : cp-decl.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h \
  cp-lex.h cp-decl.h stack.h
#__sol-sun4__#	$(CC) -g -c $(CFLAGS_NOOPT) cp-decl.c

cp-decl2.$O : cp-decl2.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h \
  cp-lex.h cp-decl.h
cp-type2.$O : cp-type2.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h
cp-typeck.$O : cp-typeck.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h $(RTL_H)
cp-class.$O : cp-class.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h
cp-call.$O : cp-call.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h
cp-init.$O : cp-init.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h $(RTL_H)
cp-method.$O : cp-method.c $(CONFIG_H) $(CPLUS_TREE_H) insn-codes.h
cp-cvt.$O : cp-cvt.c $(CONFIG_H) $(CPLUS_TREE_H)
cp-search.$O : cp-search.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h flags.h
cp-tree.$O : cp-tree.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h
cp-ptree.$O : cp-ptree.c $(CONFIG_H) $(CPLUS_TREE_H)
cp-gc.$O : cp-gc.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h
cp-except.$O : cp-except.c $(CONFIG_H) $(CPLUS_TREE_H) flags.h $(RTL_H)
cp-expr.$O : cp-expr.c $(CONFIG_H) $(CPLUS_TREE_H) $(RTL_H) flags.h \
  expr.h insn-codes.h
cp-edsel.$O : cp-edsel.c $(CONFIG_H) $(CPLUS_TREE_H) stack.h flags.h
cp-xref.$O : cp-xref.c $(CONFIG_H) $(CPLUS_TREE_H) input.h
	$(CC) -c $(CFLAGS) -DIMSTG_CPLUSPLUS cp-xref.c
cp-pt.$O : cp-pt.c $(CONFIG_H) $(CPLUS_TREE_H) cp-decl.h cp-parse.h
cp-error.$O : cp-error.c $(CONFIG_H) $(CPLUS_TREE_H)
cp-errfn.$O : cp-errfn.c $(CONFIG_H) $(CPLUS_TREE_H)

g++.$O : g++.c $(CONFIG_H) gvarargs.h

i_c_misc1.$O:	i_c_misc1.c \
		$(CONFIG_H) $(TREE_H) c-tree.h

aux-output.$O:	aux-output.c \
		$(CONFIG_H) $(RTL_H) \
		$(IDIR)/dw2i960.h \
		input.h \
		regs.h hard-reg-set.h real.h insn-config.h conditions.h \
		insn-flags.h output.h insn-attr.h flags.h $(TREE_H) \
		insn-codes.h assert.h expr.h function.h recog.h i_dwarf2.h
#__sun386i__#	$(CC) -g -c -I$(IDIR) $(HOSTDEFS) $(XCFLAGS) aux-output.c

aux-output-cp.$O: aux-output.c $(CONFIG_H) $(RTL_H) input.h regs.h\
		hard-reg-set.h real.h insn-config.h conditions.h \
		insn-flags.h output.h insn-attr.h flags.h $(TREE_H) \
		insn-codes.h assert.h expr.h function.h recog.h
	$(CC) -c $(CFLAGS) -DIMSTG_CPLUSPLUS -o aux-output-cp.$O aux-output.c
#__sun386i__#	$(CC) -g -c -I$(IDIR) $(HOSTDEFS) $(XCFLAGS) aux-output.c

caller-save.$O:	caller-save.c \
		$(CONFIG_H) $(RTL_H) \
		insn-config.h flags.h regs.h hard-reg-set.h recog.h \
		basic-block.h reload.h expr.h

calls.$O:	calls.c \
		$(CONFIG_H) $(RTL_H) $(TREE_H) \
		flags.h expr.h insn-flags.h

calls-cp.$O:	calls.c $(CONFIG_H) $(RTL_H) $(TREE_H)\
		flags.h expr.h insn-flags.h
	$(CC) -c $(CFLAGS) -DIMSTG_CPLUSPLUS -o calls-cp.$O calls.c


#
# Explicitly turn on -J switch for vax-ultrix for combine.c.  This nasty
# mess has to happen because compiler doesn't support assembler -J switch.
#
cc_dinfo.$O :	cc_dinfo.c  $(IDIR)/cc_info.h
cc_linfo.$O :	cc_linfo.c  $(IDIR)/cc_info.h
combine.$O :	combine.c \
		$(CONFIG_H) $(RTL_H) \
		gvarargs.h flags.h regs.h expr.h basic-block.h \
		insn-config.h insn-flags.h insn-codes.h insn-attr.h \
		recog.h real.h
#__vax-ultrix__#	$(CC) -S -J $(CFLAGS) combine.c; as -o combine.$O -J combine.s; rm -f combine.s
#__sol-sun4__#	$(CC) -g -c $(CFLAGS_NOOPT) combine.c

convert.$O:	convert.c $(CONFIG_H) $(TREE_H) flags.h convert.h

real.$O:	real.c $(CONFIG_H) $(TREE_H)

cse.$O:		cse.c \
		$(CONFIG_H) $(RTL_H) \
		regs.h hard-reg-set.h flags.h real.h insn-config.h recog.h

dbxout.$O:	dbxout.c \
		$(CONFIG_H) $(RTL_H) $(TREE_H) \
		flags.h regs.h insn-config.h reload.h xcoffout.h gstab.h

dwarfout.$O:	dwarfout.c \
		$(CONFIG_H) $(RTL_H) $(TREE_H) \
		dwarf.h flags.h insn-config.h reload.h output.h defaults.h

emit-rtl.$O:	emit-rtl.c \
		i_lutil.h \
		$(CONFIG_H) $(RTL_H) \
		gvarargs.h flags.h function.h expr.h regs.h \
		insn-config.h real.h bytecode.h \
		bc-opcode.h bc-typecd.h bc-typecd.def bc-optab.h bc-emit.h bc-opname.h

explow.$O:	explow.c \
		$(CONFIG_H) $(RTL_H) $(TREE_H) \
		flags.h expr.h hard-reg-set.h insn-config.h recog.h \
		insn-flags.h insn-codes.h 

expmed.$O:	expmed.c \
		$(CONFIG_H) $(RTL_H) $(TREE_H) \
		flags.h insn-flags.h insn-codes.h insn-config.h expr.h \
		real.h recog.h

#
# Explicitly turn off optimization for expr.o when compiling on the
# rs6000 host. Workaround for "out of space" problem. Needs to be
# resolved after 2.0 ships.
#
expr.$O:	expr.c \
		$(CONFIG_H) $(RTL_H) $(TREE_H) \
		flags.h function.h insn-flags.h insn-codes.h expr.h \
		insn-config.h recog.h output.h gvarargs.h typeclass.h \
		bytecode.h bc-opcode.h bc-typecd.h bc-typecd.def bc-optab.h \
		bc-emit.h modemap.def
#__rs6000__#	$(CC) -g -c -I$(IDIR) $(HOSTDEFS) $(XCFLAGS) expr.c

final.$O:	final.c \
		$(CONFIG_H) $(RTL_H) \
		gvarargs.h regs.h insn-config.h insn-attr.h insn-codes.h \
		recog.h conditions.h flags.h real.h output.h hard-reg-set.h \
		gstab.h xcoffout.h

fold-const.$O:	fold-const.c \
		$(CONFIG_H) $(TREE_H) flags.h

flow.$O:	flow.c \
		$(CONFIG_H) $(RTL_H) \
		basic-block.h insn-config.h regs.h hard-reg-set.h \
		flags.h output.h obstack.h 

function.$O:	function.c \
		$(CONFIG_H) $(RTL_H) $(TREE_H) \
		flags.h function.h insn-flags.h expr.h insn-codes.h regs.h \
		hard-reg-set.h insn-config.h recog.h output.h  bytecode.h

global.$O:global.c \
		$(CONFIG_H) $(RTL_H) \
		flags.h basic-block.h hard-reg-set.h regs.h insn-config.h \
		output.h

getpwd.$O:	getpwd.c $(CONFIG_H)

#
# integrate.c compiled without optimization for i386v because of
# core dump when compiled with optimization.
#
integrate.$O:	integrate.c \
		i_lutil.h \
		$(CONFIG_H) $(RTL_H) $(TREE_H) \
		flags.h insn-config.h insn-flags.h expr.h output.h \
		integrate.h real.h function.h obstack.h bytecode.h
#__i386v__#	$(CC) -g -c -I$(IDIR) $(HOSTDEFS) $(XCFLAGS) integrate.c


jump.$O:	jump.c \
		$(CONFIG_H) $(RTL_H) \
		flags.h hard-reg-set.h regs.h expr.h insn-config.h \
		insn-flags.h real.h

local-alloc.$O:	local-alloc.c \
		$(CONFIG_H) $(RTL_H) \
		flags.h basic-block.h regs.h hard-reg-set.h insn-config.h \
		recog.h output.h

loop.$O:	loop.c \
		$(CONFIG_H) $(RTL_H) \
		obstack.h expr.h insn-config.h insn-flags.h regs.h \
		hard-reg-set.h recog.h flags.h real.h loop.h

optabs.$O:	optabs.c \
		$(CONFIG_H) $(RTL_H) $(TREE_H) \
		flags.h insn-flags.h insn-codes.h expr.h insn-config.h \
		recog.h

print-rtl.$O:	print-rtl.c \
		$(CONFIG_H) $(RTL_H) $(TREE_H)

print-tree.$O:	print-tree.c \
		$(CONFIG_H) $(TREE_H) 

recog.$O:	recog.c \
		$(CONFIG_H) $(RTL_H) \
		insn-config.h insn-attr.h insn-flags.h insn-codes.h \
		recog.h regs.h hard-reg-set.h flags.h real.h 

reg-stack.$O:	reg-stack.c \
		$(CONFIG_H) $(RTL_H) $(TREE_H) \
		insn-config.h regs.h hard-reg-set.h flags.h

regclass.$O:	regclass.c \
		$(CONFIG_H) $(RTL_H) \
		hard-reg-set.h flags.h basic-block.h regs.h insn-config.h \
		recog.h bytecode.h

reload.$O:	reload.c \
		$(CONFIG_H) $(RTL_H) \
		insn-config.h insn-codes.h recog.h reload.h regs.h \
		hard-reg-set.h flags.h real.h

reload1.$O:	reload1.c \
		$(CONFIG_H) $(RTL_H) \
		obstack.h insn-config.h insn-flags.h insn-codes.h \
		flags.h expr.h regs.h hard-reg-set.h reload.h recog.h \
		basic-block.h output.h

reorg.$O:	reorg.c \
		$(CONFIG_H) $(RTL_H) \
		insn-attr.h insn-config.h conditions.h hard-reg-set.h \
		basic-block.h regs.h insn-flags.h recog.h flags.h \
		output.h obstack.h

rtl.$O:		rtl.c \
		$(CONFIG_H) $(RTL_H) \
		obstack.h rtl.def machmode.def

rtlanal.$O:	rtlanal.c \
		$(CONFIG_H) $(RTL_H)

sched.$O:	sched.c \
		$(CONFIG_H) $(RTL_H) \
		basic-block.h regs.h hard-reg-set.h flags.h insn-config.h \
		insn-attr.h

sdbout.$O:	sdbout.c \
		$(CONFIG_H) $(RTL_H) $(TREE_H) \
		regs.h flags.h insn-config.h reload.h ../../include/coff.h

stor-layout.$O:	stor-layout.c \
		$(CONFIG_H) $(TREE_H) \
		function.h

stmt.$O:	stmt.c \
		$(CONFIG_H) $(RTL_H) $(TREE_H) \
		flags.h function.h insn-flags.h insn-config.h insn-codes.h \
		expr.h hard-reg-set.h obstack.h loop.h recog.h \
		bytecode.h bc-typecd.h bc-typecd.def bc-opcode.h bc-optab.h \
		bc-emit.h

stupid.$O:	stupid.c \
		$(CONFIG_H) $(RTL_H) \
		hard-reg-set.h regs.h flags.h

toplev.$O:	toplev.c \
		i_lutil.h input.h \
		$(CONFIG_H) $(RTL_H) $(TREE_H) \
		input.h flags.h insn-attr.h xcoffout.h bytecode.h bc-emit.h

toplev-cp.$O:	toplev.c i_lutil.h input.h $(CONFIG_H) $(RTL_H) $(TREE_H) \
		input.h flags.h insn-attr.h xcoffout.h bytecode.h bc-emit.h
	$(CC) -c $(CFLAGS) -DIMSTG_CPLUSPLUS -o toplev-cp.$O toplev.c

tree.$O:	tree.c \
		$(CONFIG_H) $(TREE_H) \
		flags.h function.h obstack.h gvarargs.h tree.def

unroll.$O:	unroll.c \
		$(CONFIG_H) $(RTL_H) \
		insn-config.h integrate.h regs.h flags.h expr.h loop.h

varasm.$O:	varasm.c \
		$(CONFIG_H) $(RTL_H) $(TREE_H) \
		flags.h expr.h hard-reg-set.h regs.h defaults.h assert.h \
		obstack.h xcoffout.h bytecode.h

xcoffout.$O:	xcoffout.c \
		$(CONFIG_H) $(RTL_H) $(TREE_H) \
		flags.h xcoffout.h

i_asm_func.$O:	i_asm_func.c i_asm_func.h \
		i_lister.h i_lutil.h input.h \
		$(CONFIG_H) $(TREE_H) $(RTL_H) expr.h regs.h flags.h \
		insn-config.h

i_bbr.$O:	i_bbr.c \
		$(CONFIG_H) $(TREE_H) $(RTL_H)

i_dwarf2.$O:	i_dwarf2.c i_dwarf2.def i_lutil.h \
		$(IDIR)/dwarf2.h $(IDIR)/dw2i960.h $(IDIR)/i_toolib.h \
		$(CONFIG_H) $(RTL_H) $(TREE_H) \
		flags.h output.h defaults.h hard-reg-set.h \
		insn-config.h reload.h i_dwarf2.h

i_lister.$O:	i_lister.c i_lister.h i_lutil.h i_lutil.def input.h \
		$(CONFIG_H) $(TREE_H) $(RTL_H) expr.h regs.h flags.h \
		insn-config.h

i_lister-cp.$O:	i_lister.c i_lister.h i_lutil.h i_lutil.def input.h $(CONFIG_H)\
		$(TREE_H) $(RTL_H) expr.h regs.h flags.h insn-config.h
	$(CC) -c $(CFLAGS) -DIMSTG_CPLUSPLUS -o i_lister-cp.$O i_lister.c

i_sched.$O:	i_sched.c \
		$(CONFIG_H) $(RTL_H) \
		basic-block.h regs.h hard-reg-set.h flags.h insn-config.h \
		insn-attr.h

i_cnstcomp.$O:	i_cnstcomp.c \
		$(CONFIG_H) $(TREE_H) $(RTL_H) \
		regs.h flags.h i_list.h i_set.h \
		basic-block.h hard-reg-set.h

i_cnstfix.$O:	i_cnstfix.c \
		$(CONFIG_H) $(RTL_H) regs.h flags.h

i_cnstprop.$O:	i_cnstprop.c \
		$(CONFIG_H) $(TREE_H) $(RTL_H) \
		regs.h flags.h real.h

i_cnstreg.$O:	i_cnstreg.c \
		$(CONFIG_H) $(TREE_H) $(RTL_H) \
		regs.h flags.h i_list.h i_set.h i_dataflow.h i_dfprivat.h\
		basic-block.h hard-reg-set.h

i_cndxfm.$O:	i_cndxfm.c \
		$(CONFIG_H) $(RTL_H) regs.h flags.h basic-block.h i_list.h

i_cp_prop.$O:	i_cp_prop.c \
		$(CONFIG_H) $(RTL_H) regs.h flags.h i_list.h i_set.h \
		basic-block.h hard-reg-set.h

i_dataflow.$O:	i_dataflow.c \
		$(CONFIG_H) $(TREE_H) $(RTL_H) gvarargs.h expr.h regs.h flags.h \
		i_jmp_buf_str.h basic-block.h insn-config.h insn-flags.h \
		hard-reg-set.h i_dataflow.h i_dfprivat.h

i_df_align.$O:	i_df_align.c \
		$(CONFIG_H) $(TREE_H) $(RTL_H) regs.h flags.h \
		basic-block.h i_dataflow.h i_dfprivat.h i_df_set.h

i_forw_prop.$O:	i_forw_prop.c \
		$(CONFIG_H) $(TREE_H) $(RTL_H) regs.h flags.h \
		basic-block.h i_dataflow.h i_dfprivat.h i_df_set.h

i_coerce.$O:	i_coerce.c \
		$(CONFIG_H) $(TREE_H) $(RTL_H) regs.h flags.h \
		basic-block.h i_dataflow.h i_dfprivat.h i_df_set.h

i_df_set.$O:	i_df_set.c \
		$(CONFIG_H) assert.h i_df_set.h

i_double.$O:	i_double.c \
		$(CONFIG_H) i_double.h

i_expect.$O:	i_expect.c \
		$(CONFIG_H) $(RTL_H) flags.h assert.h i_graph.h

i_glob_db.$O:	i_glob_db.c \
		$(CONFIG_H) $(TREE_H) $(RTL_H) expr.h regs.h flags.h \
		output.h $(IDIR)/cc_info.h insn-flags.h i_glob_db.h \
		i_profile.h hard-reg-set.h

i_glob_inl.$O:	i_glob_inl.c \
		$(CONFIG_H) $(TREE_H) $(RTL_H) expr.h regs.h flags.h \
		output.h $(IDIR)/cc_info.h obstack.h c-tree.h \
		i_double.h insn-flags.h i_glob_db.h i_profile.h

i_graph.$O:	i_graph.c \
		$(CONFIG_H) $(RTL_H) real.h assert.h i_graph.h

i_list.$O:	i_list.c \
		$(CONFIG_H) i_list.h

i_misc1.$O:	i_misc1.c \
		i_lutil.h \
		$(CONFIG_H) $(TREE_H) $(RTL_H) obstack.h basic-block.h \
		expr.h i_jmp_buf_str.h assert.h hard-reg-set.h \
		i_graph.h i_profile.h 

i_mrd_info.$O:	i_mrd_info.c \
		$(CONFIG_H) $(TREE_H) $(RTL_H) expr.h regs.h flags.h \
		assert.h gvarargs.h insn-config.h hard-reg-set.h \
		insn-flags.h basic-block.h i_jmp_buf_str.h i_dataflow.h \
		i_dfprivat.h recog.h 

i_pic.$O:	i_pic.c \
		$(CONFIG_H) $(RTL_H) flags.h expr.h

i_profile.$O:	i_profile.c \
		$(CONFIG_H) $(RTL_H) assert.h flags.h basic-block.h i_list.h \
                tree.h i_dataflow.h i_df_set.h $(IDIR)/cc_info.h \
		i_glob_db.h i_prof_form.h i_profile.h

i_prof_form.$O:	i_prof_form.c \
		$(CONFIG_H) i_prof_form.h

i_sblock.$O:	i_sblock.c \
		$(CONFIG_H) $(TREE_H) $(RTL_H) expr.h insn-config.h \
		regs.h hard-reg-set.h recog.h flags.h assert.h \
		insn-flags.h basic-block.h gvarargs.h \
		i_dataflow.h i_dfprivat.h

i_size.$O:	i_size.c \
		$(CONFIG_H) $(TREE_H) $(RTL_H) regs.h flags.h
#
#  Explicitly turn off optimization for i_shadow when compiling on the
#  hp9000 host to defeat incorrect optimization (structure passing)
#  in the routine USABLE_MEM.
#
#  Explicitly turn on optimization for i_shadow for rs6000, with just -g
#  we get a compiler internal from IBM rs6000 compiler.
#
i_shadow.$O:	i_shadow.c \
		$(CONFIG_H) $(RTL_H) expr.h regs.h flags.h assert.h \
		insn-config.h hard-reg-set.h insn-flags.h recog.h
#__hp9000__#	$(CC) -c -I$(IDIR) $(HOSTDEFS) $(XCFLAGS) i_shadow.c
#__rs6000__#	$(CC) -c -O -g -I$(IDIR) $(HOSTDEFS) $(XCFLAGS) i_shadow.c

i_shadow2.$O:	i_shadow2.c \
		$(CONFIG_H) $(TREE_H) $(RTL_H) expr.h regs.h flags.h \
		assert.h gvarargs.h insn-config.h insn-flags.h \
		hard-reg-set.h i_jmp_buf_str.h basic-block.h \
		i_dataflow.h i_dfprivat.h recog.h 

i_symwalk.$O:	i_symwalk.c \
		$(CONFIG_H) $(TREE_H) $(RTL_H) flags.h regs.h insn-config.h \
		c-tree.h assert.h

i_deadelim.$O:	i_deadelim.c \
		$(CONFIG_H) $(TREE_H) $(RTL_H) expr.h regs.h flags.h \
		assert.h gvarargs.h insn-config.h insn-flags.h \
		hard-reg-set.h i_jmp_buf_str.h basic-block.h \
		i_dataflow.h i_dfprivat.h recog.h 

i_input.$O:	i_input.c $(CONFIG_H) i_lister.h

#-----------------------------------------------------------------------------
#		'STANDARD' GNU/960 TARGETS BELOW THIS POINT
#-----------------------------------------------------------------------------

# If not building an Intel SNAPSHOT, then include a '+' after the
# minor revision number, and include the build date.
# Echo spaces in a non-SNAPSHOT build so the length of the version
# string is the same.

ver960.$O: FORCE
	$(RM) ver960.c
	SNAPSHOT=$(SNAPSHOT) ./mkver.sh
	$(CC) $(CFLAGS) -c ver960.c

# Dummy target to force execution of dependent targets.
#
FORCE:


# Copy the files into directories where they will be run.
#
install_cc1:
	$(MK) $(CC1) OPT=$(IOPT)
	-$(STRIP) $(CC1)
	(cd $(LIBDEST); $(RM) $(CC1))
	$(CP) $(CC1) $(LIBDEST)
	$(RM) $(CC1)

install_cc1plus:
	$(MK) $(CC1PLUS) OPT=$(IOPT)
	-$(STRIP) $(CC1PLUS)
	(cd $(LIBDEST); $(RM) $(CC1PLUS))
	$(CP) $(CC1PLUS) $(LIBDEST)
	$(RM) $(CC1PLUS)

install_cpp:
	$(MK) $(CPP) OPT=$(IOPT)
	-$(STRIP) $(CPP)
	(cd $(LIBDEST); $(RM) $(CPP))
	$(CP) $(CPP) $(LIBDEST)
	$(RM) $(CPP)

install_gcc:
	$(MK) gcc960$(EXE) OPT=$(IOPT)
	-$(STRIP) gcc960$(EXE)
	(cd $(BINDEST); $(RM) gcc960$(EXE))
	$(CP) gcc960$(EXE) $(BINDEST)
	$(RM) gcc960$(EXE)

install_ic:
	$(MK) ic960$(EXE) OPT=$(IOPT)
	-$(STRIP) ic960$(EXE)
	(cd $(BINDEST); $(RM) ic960$(EXE))
	$(CP) ic960$(EXE) $(BINDEST)
	$(RM) ic960$(EXE)

install: check_snap install_cc1 install_cpp install_gcc install_ic

check_snap:
	if [ "$(SNAPSHOT)" = 1 ]  ; then $(ADMIN)/chksnap.sh $(HOST) ; fi

#-----------------------------------------------------------------------------
# Delete all objects, targets, and temp files made in the course of building.
# Separate invocation lines required in order for DOS version to work.
#-----------------------------------------------------------------------------
clean:
	$(RM) gcc960$(EXE)
	$(RM) ic960$(EXE)
	$(RM) $(CC1)
	$(RM) $(CC1PLUS)
	$(RM) $(CPP)
	$(RM) *.$O
	$(RM) ver960.c
	$(RM) stmp_*.*
	$(RM) tmp.tmp
	$(RM) tm.h
	$(RM) aux-output.c
	$(RM) config.h hconfig.h tconfig.h
	$(RM) md
	$(RM) insn-*
	$(RM) i_copreg.h
	$(RM) bc-opcode.h
	$(RM) bc-opname.h
	$(RM) bc-arity.h
	$(CLEANGEN)
	$(RM) *.combine
	$(RM) *.cse
	$(RM) *.dbr
	$(RM) *.flow
	$(RM) *.greg
	$(RM) *.jump
	$(RM) *.jump2
	$(RM) *.loop
	$(RM) *.lreg
	$(RM) *.msched
	$(RM) *.rtl
	$(RM) *.s
	$(RM) *.shadow
	$(RM) core
	$(RM) *.rex		# for DOS; doesn't hurt anybody else


#-----------------------------------------------------------------------------
# Target to uncomment host-specific lines in this makefile, i.e. lines
# beginning in column 1 with the following string:  #__<hostname>__# .
# Original Makefile is backed up as 'Makefile.old'.
#
# Invoke with:  make make HOST=xxx
#-----------------------------------------------------------------------------
make:
	-@grep -s "^#The next line was generated by 'make make'" Makefile; \
	if test $$? = 0 ; then	\
		echo "Makefile has already been processed with 'make make'";\
		exit 1; \
	elif test $(HOST)x = x ; then \
		echo 'Specify "make make HOST=???"'; \
		exit 1; \
	else \
		mv -f Makefile Makefile.old; \
		echo "#The next line was generated by 'make make'"> Makefile;\
		echo "HOST=$(HOST)"				 >> Makefile; \
		echo						 >> Makefile; \
		sed "s/^#__$(HOST)__#//" < Makefile.old		 >> Makefile; \
		if test $(HOST) = dos; then mv Makefile makefile; fi \
	fi
