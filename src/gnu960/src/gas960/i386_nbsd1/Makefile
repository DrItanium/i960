#The next line was generated by 'mkmake'
HOST=i386_nbsd1

#-----------------------------------------------------------------------------
#               Makefile for gas960
#
# $Id: Makefile,v 1.90 1995/07/27 00:43:30 rdsmithx Exp $
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Makefile for GNU Assembler
#   Copyright (C) 1987, 1988, 1990, 1991 Free Software Foundation, Inc.
#
# This file is part of GNU GAS.
#
# GNU GAS is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 1, or (at your option)
# any later version.
#
# GNU GAS is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GNU GAS; see the file COPYING.  If not, write to
# the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
#
#-----------------------------------------------------------------------------


# Essential under System V, harmless elsewhere
SHELL	= /bin/sh

CTARG	= gas960c
BTARG	= gas960
ETARG	= gas960e
ITARG	= asm960

IDIR	= ../../include
LDIR	= $(G960BASE)/lib
CFLAGS  = -DASM_SET_CCINFO_TIME=1 $(OPT) -I. -I$(IDIR) -DGNU960 -DCR_EOL $(HOSTDEFS)


#-----------  DEFAULTS  ---------------------------
HOST_H	 = ho-generic.h
O	 = o
A	 = a
RM	 = rm -f
CP	 = cp
MV	 = mv
LN	 = ln -s
STRIP	 = strip
OPT	 = -g
IOPT	 = -O
OUT	 = -o
NOLINK	 = -c
DEST	 = $(G960BASE)/bin
LIBS 	 = $(LDIR)/cc_info.$A $(LDIR)/toolib.$A
LINKC    = $(CC) $(OPT)
ROMIT    = @echo
MUNGIT	 = @echo
MAKEMIN  =

#-----------------------------------------------------------------------------
#		Uncomment for GCC960 HOSTED assembler.
#__gcc960__## To use this, get a mon960 eval board with either big or little-
#__gcc960__## endian memory.  To use two pass compilation, you'll have to 
#__gcc960__## mkdir pdb.
#__gcc960__## Compile the assembler, using the command:
#__gcc960__## make gas960c OPT=optimization [TARGET=targ]
#__gcc960__##    where "targ" is either tc or hk (tc is the default).
#__gcc960__## download it to the target using the command:
#__gcc960__## gdb960 -r <port> -t mon960 -b 38400 ./gas960c
#__gcc960__## Then, to test it, mkdir gdb, and then use the script called runem.sh.
#__gcc960__## This will result in the gdb directory populated with the *.o files
#__gcc960__## assembled by the 960 based assembler.
#__gcc960__## At this point, if you used a little endian monitor, then goto
#__gcc960__## a little endian host, and vice versa (big endian monitor, big
#__gcc960__## endian host).
#__gcc960__## Assemble all of the .s files with the host's gas960c using the command:
#__gcc960__## script assem.sh.  Example:
#__gcc960__## mkdir i386vr4;sh -xv assem.sh i386vr4
#__gcc960__## Now, verify the gdb .o files are the same as those in the other directory.
#__gcc960__## You can use diff on a sun4 host for this.  For example: diff i386vr4 gdb
#__gcc960__##
#__gcc960__#TARGET   = tc
#__gcc960__#OMFFLAG  = -Fcoff
#__gcc960__#CC       = gcc960 $(OMFFLAG) -Tm$(TARGET) -fsigned-char -mic-compat -Z pdb
#__gcc960__#LD       = gld960
#__gcc960__#HOST_H   = ho-gcc.h
#__gcc960__#LDFLAGS  =
#__gcc960__#HOSTLIBS =
#__gcc960__#LINKC    = $(LD) -ACA gcc960$(TARGET).ld -c -lmg -lromg -lhg -lqfg -Z pdb
#__gcc960__#ROMIT    = rom960 gcc960$(TARGET)
#__gcc960__#MUNGIT   = gmung960 -T 0xe0008000 -D
#__gcc960__#
#__gcc960__#NOLINK   = -S
#__gcc960__#
#-----------------------------------------------------------------------------
#		Uncomment for DEC 3100
#__dec3100__#HOST_H	= ho-dec31.h
#-----------------------------------------------------------------------------
#		Uncomment for IBM RS6000
#__rs6000__#HOST_H	= ho-rs6k.h
#__rs6000__#HOSTDEFS	= -DUSG -qchars=signed
#__rs6000__#LDFLAGS	= -b nodelcsect
#__rs6000__#ALLOCA	= alloca.$O
#__rs6000__#IOPT	= -g
#-----------------------------------------------------------------------------
#		Uncomment for Sun 3
#__sun3__#HOST_H	= ho-sun3.h
#__sun3__#LDFLAGS	= -Bstatic
#-----------------------------------------------------------------------------
#		Uncomment for Sun 386i
#__sun386i__#HOST_H	= ho-sun86.h
#__sun386i__#LDFLAGS	= -Bstatic
#-----------------------------------------------------------------------------
#		Uncomment for Sun 4
#__sun4__#HOST_H	= ho-sun4.h
#__sun4__#LDFLAGS	= -Bstatic
#-----------------------------------------------------------------------------
#		Uncomment for i386_nbsd1
HOSTDEFS	= -DI386_NBSD1
HOST_H		= ho-i386.h
#-----------------------------------------------------------------------------
#		Uncomment for Solaris on the sun4 (sol-sun4).
#__sol-sun4__#HOSTDEFS  = -DUSG -DSOLARIS
#__sol-sun4__#ALLOCA    = alloca.$O
#__sol-sun4__#HOST_H    = ho-sol.h
#__sol-sun4__#LDFLAGS	= -Bstatic
#-----------------------------------------------------------------------------
#               Uncomment for Solaris 5.1 on the sun4
#__sol-sun4__#ALLOCA  = alloca.$O
#__sol-sun4__#HOSTDEFS        = -DUSG
#__sol-sun4__#HOST_H  = ho-sol.h
#-----------------------------------------------------------------------------
#		Uncomment for VAX/Ultrix
#__vax-ultrix__#HOST_H	= ho-vax.h
#-----------------------------------------------------------------------------
#		Uncomment for Apollo 400
#__ap400__#HOST_H	= ho-ap400.h
#__ap400__#HOSTDEFS	= -A nansi -DNO_STDARG
#-----------------------------------------------------------------------------
#		Uncomment for System V / i386  release 4
#__i386vr4__#ALLOCA	= alloca.$O
#__i386vr4__#HOSTDEFS	= -DUSG
#__i386vr4__#HOST_H	= ho-i386.h
#-----------------------------------------------------------------------------
#		Uncomment for System V / i386  release 3.2
#__i386v__#HOSTDEFS	= -DUSG
#__i386v__#HOSTLIBS	= -lmalloc -lPW
#__i386v__#HOST_H	= ho-i386.h
#-----------------------------------------------------------------------------
#		Uncomment for NCR System V
#__68020v__#HOSTDEFS	= -DUSG -O0
#__68020v__#HOSTLIBS	= -lmalloc -lPW
#__68020v__#HOST_H	= ho-68020.h
#-----------------------------------------------------------------------------
#		Uncomment for HP9000-300
#__hp9000__#HOSTDEFS	= -DUSG
#__hp9000__#ALLOCA	= alloca.$O
#__hp9000__#HOST_H	= ho-hpux.h
#-----------------------------------------------------------------------------
#		Uncomment for HP9000-700
#__hp700__#HOSTDEFS	= -DUSG
#__hp700__#ALLOCA	= alloca.$O
#__hp700__#HOST_H	= ho-hpux.h
#-----------------------------------------------------------------------------
#		Uncomment for A/UX on Macintosh
#__mac-aux__#HOSTDEFS	= -DUSG
#__mac-aux__#ALLOCA	= alloca.$O
#__mac-aux__#HOST_H	= ho-macaux.h
#-----------------------------------------------------------------------------
#		Uncomment for DOS
#__dos__#O		= obj
#__dos__#A		= lib
#__dos__#EXE		= .exe
#__dos__#EXP		= .exp
#__dos__#ALLOCA		= alloca.$O
#__dos__#RM		= del
#__dos__#CP		= copy
#__dos__#MV		= ren
#__dos__#LN		= copy
#__dos__#STRIP		= echo	# no-op
#__dos__#HOST_H		= ho_dos.h
#__dos__#HOSTDEFS	= -DDOS -DUSG -w1 -fsoft -Heol=10 
#__dos__#OPT		= -g
#__dos__#IOPT		= -O3
#__dos__#OUT		= -e
#__dos__#DEST		= $(G960BASE,/=\)\bin
#__dos__#HOSTNM         = "dos"
#                       Metaware can't handle -DHOST=\"xxx\"
#__dos__#I_DIR          =$(IDIR,/=\)
#__dos__#CC             = HC386
#__dos__#LDFLAGS	= "-stack 080000h" "-maxreal 0ffffh" -fsoft -twocase -nomap -nostub
#__dos__#DOSXP		= c:\tnt
#__dos__#DOSXN		= $(DOSXP)\bin\gotnt.exe
#__dos__#CFIG		= $(DOSXP)\bin\cfig386
#__dos__#CFIGFLAGS	= -saveregs -maxvcpimem 0 -vmfile vmmdrv.exp
#__dos__#MAKEMIN	= -m
#-----------------------------------------------------------------------------
#		Uncomment for Windows 95
#__win95__#O		= obj
#__win95__#A		= lib
#__win95__#EXE		= .exe
#__win95__#ALLOCA		= alloca.$O
#__win95__#LN		= copy
#__win95__#STRIP		= echo	# no-op
#__win95__#HOST_H		= ho_dos.h
#__win95__#HOSTDEFS	= -W2 -DWIN95 -DDOS -DUSG
#__win95__#OPT		= -Zi
#__win95__#IOPT		= -O2
#__win95__#OUT		= -o
#__win95__#DEST		= $(G960BASE,/=\)\bin
#__win95__#I_DIR          =$(IDIR,/=\)
#__win95__#CC             = CL
#__win95__#LDFLAGS	= 
#__win95__#MAKEMIN	= -m
#------------------------------------------------------------------------------

.c.$O:
	$(CC) $(NOLINK) $(CFLAGS) $(CPPFLAGS) $<
#__gcc960__#	$(CC) -c                      $*.s

I960_OBJS= atofieee.$O tc_i960.$O
OBJS	= \
	$(I960_OBJS) \
	$(ALLOCA) app.$O as.$O atof_gen.$O cond.$O expr.$O \
	fp_const.$O fp_util.$O frags.$O hash.$O hex_val.$O \
	in_file.$O in_scrub.$O listing.$O messages.$O \
	obstack.$O out_file.$O read.$O segs.$O \
	symbols.$O write.$O xmalloc.$O xrealloc.$O cc_finfo.$O

OBJLIST = $(OBJS) $(LIBS) ver960.$O
#__dos__#OBJLIST = @objs.rf
#__win95__#OBJLIST = @objs.rf

all:	$(CTARG) $(BTARG) $(ETARG)

$(ITARG): $(CTARG)
	$(MV) $(CTARG)$(EXE) $(ITARG)$(EXE)
#__dos__#	$(MV) $(CTARG)$(EXP) $(ITARG)$(EXE)	

$(CTARG): FORCE
	make $(MAKEMIN) __coff__
	make $(MAKEMIN) coff_objs CFLAGS="$(CFLAGS)" OMFFLAG=$(OMFFLAG)
	make $(MAKEMIN) ver960.$O OMF=COFF OMFFLAG=$(OMFFLAG)
	$(LINKC) $(OMFFLAG) $(OUT) $(CTARG) $(LDFLAGS) $(OBJLIST) obj_coff.$O
	$(ROMIT) gas960c
#__dos__#	copy /b $(DOSXN)+$(CTARG)$(EXP) $(CTARG)$(EXE)
#__dos__#	$(CFIG) $(CTARG) $(CFIGFLAGS)

$(BTARG): FORCE
	make $(MAKEMIN) __bout__
	make $(MAKEMIN) bout_objs CFLAGS="$(CFLAGS)" OMFFLAG=$(OMFFLAG)
	make $(MAKEMIN) ver960.$O OMF=BOUT OMFFLAG=$(OMFFLAG)
	$(LINKC) $(OMFFLAG) $(OUT) $(BTARG) $(LDFLAGS) $(OBJLIST) obj_bout.$O
	$(MUNGIT) gas960
#__dos__#	copy /b $(DOSXN)+$(BTARG)$(EXP) $(BTARG)$(EXE)
#__dos__#	$(CFIG) $(BTARG) $(CFIGFLAGS)

$(ETARG): FORCE
	make $(MAKEMIN) __elf__
	make $(MAKEMIN) elf_objs CFLAGS="$(CFLAGS)" OMFFLAG=$(OMFFLAG)
	make $(MAKEMIN) ver960.$O OMF=ELF OMFFLAG=$(OMFFLAG)
	$(LINKC) $(OMFFLAG) $(OUT) $(ETARG) $(LDFLAGS) $(OBJLIST) obj_elf.$O
	$(ROMIT) gas960e
#__dos__#	copy /b $(DOSXN)+$(ETARG)$(EXP) $(ETARG)$(EXE)
#__dos__#	$(CFIG) $(ETARG) $(CFIGFLAGS)

coff_objs: objs.rf hc.pro host.h $(OBJS) obj_coff.$O 

bout_objs: objs.rf hc.pro host.h $(OBJS) obj_bout.$O 

elf_objs: objs.rf hc.pro host.h $(OBJS) obj_elf.$O 

__bout__:
	$(RM) *.$O
	$(RM) objfmt.h
	$(RM) host.h
	$(RM) __coff__
	$(RM) __elf__
	$(LN) obj_bout.h objfmt.h
	touch __bout__

__coff__:
	$(RM) *.$O
	$(RM) objfmt.h
	$(RM) host.h
	$(RM) __bout__
	$(RM) __elf__
	$(LN) obj_coff.h objfmt.h
	touch __coff__

__elf__:
	$(RM) *.$O
	$(RM) objfmt.h
	$(RM) host.h
	$(RM) __bout__
	$(RM) __coff__
	$(LN) obj_elf.h objfmt.h
	touch __elf__

host.h:
	$(LN) $(HOST_H) host.h

objs.rf:
#__dos__#	!foreach i $(OBJS) ver960.$O
#__dos__#		echo $i >>objs.rf
#__dos__#	!end
#__dos__#	!foreach i $(LIBS) $(HOSTLIBS)
#__dos__#		echo -l$i >>objs.rf
#__dos__#	!end
#__win95__#	!foreach i $(OBJS) ver960.$O $(LIBS) $(HOSTLIBS)
#__win95__#		echo $i >>objs.rf
#__win95__#	!end

hc.pro:
#__dos__#	$(CP) $(I_DIR)\sys\hc.pro hc.pro
#__win95__#	@echo

#-----------------------------------------------------------------------------
#		Header file dependencies
#-----------------------------------------------------------------------------
app.$O:		as.h host.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h strucsym.h reloc.h
app.$O:		write.h flonum.h bignum.h expr.h frags.h hash.h read.h symbols.h
app.$O:		obj.h tc.h
as.$O:		as.h host.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h strucsym.h reloc.h
as.$O:		write.h flonum.h bignum.h expr.h frags.h hash.h read.h symbols.h
as.$O:		obj.h tc.h
atof_gen.$O:	as.h host.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h strucsym.h
atof_gen.$O:	reloc.h write.h flonum.h bignum.h expr.h frags.h hash.h read.h
atof_gen.$O:	symbols.h tc.h obj.h 
atofieee.$O:	as.h host.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h strucsym.h
atofieee.$O:	reloc.h write.h flonum.h bignum.h expr.h frags.h hash.h read.h
atofieee.$O:	symbols.h tc.h obj.h 
cond.$O:	as.h host.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h strucsym.h reloc.h
cond.$O:	write.h flonum.h bignum.h expr.h frags.h hash.h read.h symbols.h
cond.$O:	tc.h obj.h obstack.h 
debug.$O:	as.h host.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h strucsym.h
debug.$O:	reloc.h write.h flonum.h bignum.h expr.h frags.h hash.h read.h
debug.$O:	symbols.h tc.h obj.h 
expr.$O:	as.h host.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h  strucsym.h reloc.h
expr.$O:	write.h flonum.h bignum.h expr.h frags.h hash.h read.h symbols.h
expr.$O:	tc.h obj.h obstack.h segs.h
fp_const.$O:	flonum.h bignum.h 
fp_copy.$O:	as.h host.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h strucsym.h
fp_copy.$O:	reloc.h write.h flonum.h bignum.h expr.h frags.h hash.h read.h 
fp_copy.$O:	symbols.h tc.h obj.h 
fp_mult.$O:	flonum.h bignum.h 
frags.$O:	as.h host.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h strucsym.h segs.h
frags.$O:	reloc.h write.h flonum.h bignum.h expr.h frags.h hash.h read.h
frags.$O:	symbols.h tc.h obj.h obstack.h 
hash.$O:	as.h host.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h  strucsym.h reloc.h
hash.$O:	write.h flonum.h bignum.h expr.h frags.h hash.h read.h symbols.h
hash.$O:	obj.h tc.h
in_file.$O:	as.h host.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h
in_file.$O:	strucsym.h reloc.h write.h flonum.h bignum.h expr.h
in_file.$O:	frags.h hash.h read.h symbols.h tc.h obj.h in_file.h 
in_scrub.$O:	as.h host.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h strucsym.h
in_scrub.$O:	reloc.h write.h flonum.h bignum.h expr.h frags.h hash.h read.h
in_scrub.$O:	symbols.h tc.h obj.h in_file.h 
listing.$O:	as.h write.h
messages.$O:	as.h host.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h strucsym.h
messages.$O:	reloc.h write.h flonum.h bignum.h expr.h frags.h hash.h read.h
messages.$O:	symbols.h tc.h obj.h
obstack.$O:	obstack.h 
obj_bout.$O:	as.h host.h obj_bout.h tc_i960.h strucsym.h reloc.h write.h
obj_bout.$O:	flonum.h bignum.h expr.h frags.h hash.h read.h segs.h
obj_bout.$O:	symbols.h tc.h obj.h obstack.h 
obj_coff.$O:	as.h host.h obj_coff.h obj_elf.h tc_i960.h strucsym.h reloc.h write.h
obj_coff.$O:	flonum.h bignum.h expr.h frags.h hash.h read.h segs.h
obj_coff.$O:	symbols.h tc.h obj.h obstack.h 
obj_elf.$O:	as.h host.h obj_elf.h tc_i960.h strucsym.h reloc.h write.h
obj_elf.$O:	flonum.h bignum.h expr.h frags.h hash.h read.h segs.h
obj_elf.$O:	symbols.h tc.h obj.h obstack.h 
out_file.$O:	as.h host.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h  strucsym.h
out_file.$O:	reloc.h write.h flonum.h bignum.h expr.h frags.h hash.h read.h
out_file.$O:	symbols.h tc.h obj.h out_file.h 
read.$O:	as.h host.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h  strucsym.h reloc.h 
read.$O:	write.h flonum.h bignum.h expr.h frags.h hash.h read.h symbols.h
read.$O:	obj.h obstack.h tc.h
segs.$O:	as.h host.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h  strucsym.h segs.h
segs.$O:	reloc.h write.h flonum.h bignum.h expr.h frags.h hash.h read.h
segs.$O:	symbols.h tc.h obj.h obstack.h 
symbols.$O:	as.h host.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h strucsym.h segs.h
symbols.$O:	reloc.h write.h flonum.h bignum.h expr.h frags.h hash.h read.h
symbols.$O:	symbols.h tc.h obj.h obstack.h 
tc_i960.$O:	as.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h strucsym.h reloc.h write.h
tc_i960.$O:	flonum.h bignum.h expr.h frags.h hash.h read.h symbols.h tc.h
tc_i960.$O:	i960_opc.h obj.h obstack.h
write.$O:	as.h host.h obj_bout.h obj_coff.h obj_elf.h tc_i960.h  strucsym.h segs.h
write.$O:	reloc.h write.h flonum.h bignum.h expr.h frags.h hash.h read.h
write.$O:	symbols.h tc.h obj.h obstack.h out_file.h 

#-----------------------------------------------------------------------------
#		STANDARD GNU/960 TARGETS BELOW THIS POINT
#-----------------------------------------------------------------------------

ver960.o: FORCE
	$(RM) ver960.c
	echo static char gnu960_ver[]=	 		 > ver960.c
	echo "\"Intel 80960 $(OMF) Assembler, `cat _version`, `date`\";" >> ver960.c
	echo \#include \"ver960.h\"			>> ver960.c
	$(CC) $(CFLAGS) $(NOLINK) ver960.c
#__gcc960__#	$(CC) -c ver960.s

# DOS version
ver960.obj: FORCE
	$(RM) ver960.c
	echo static char gnu960_ver[]=	 	 > ver960.c
	=$(LDIR)/verstr "Intel 80960 $(OMF) Assembler"  _version	>> ver960.c
	echo \#include "ver960.h"		>> ver960.c
	$(CC) $(CFLAGS) $(NOLINK) ver960.c

# Dummy target to force execution of dependent targets.
#
FORCE:


# 'G960BASE' will be defined at invocation
#
install:
	make $(MAKEMIN) $(CTARG) $(BTARG) $(ETARG) OPT="$(IOPT)" DOSXP=$(DOSXP) DOSXN=$(DOSXN)
	-$(STRIP) $(CTARG)$(EXE) $(BTARG)$(EXE) $(ETARG)$(EXE)
	(cd $(DEST); $(RM) $(CTARG)$(EXE))
	$(CP) $(CTARG)$(EXE) $(DEST)
	(cd $(DEST); $(RM) $(BTARG)$(EXE))
	$(CP) $(BTARG)$(EXE) $(DEST)
	(cd $(DEST); $(RM) $(ETARG)$(EXE))
	$(CP) $(ETARG)$(EXE) $(DEST)
#__dos__#	(cd $(DEST); $(RM) $(CTARG)$(EXP))
#__dos__#	$(CP) $(CTARG)$(EXP) $(DEST)
#__dos__#	(cd $(DEST); $(RM) $(BTARG)$(EXP))
#__dos__#	$(CP) $(BTARG)$(EXP) $(DEST)
#__dos__#	(cd $(DEST); $(RM) $(ETARG)$(EXP))
#__dos__#	$(CP) $(ETARG)$(EXP) $(DEST)

install_ctools:
	make $(MAKEMIN) $(ITARG) OPT="$(IOPT)" DOSXP=$(DOSXP) DOSXN=$(DOSXN)
	-$(STRIP) $(ITARG)$(EXE)
	(cd $(DEST); $(RM) $(ITARG)$(EXE))
	$(CP) $(ITARG)$(EXE) $(DEST)
#__dos__#	(cd $(DEST); $(RM) $(ITARG)$(EXP))
#__dos__#	$(CP) $(ITARG)$(EXP) $(DEST)


# Separate lines required in order for DOS version to work
#
clean:
	$(RM) $(ITARG)$(EXE)
	$(RM) $(CTARG)$(EXE)
	$(RM) $(BTARG)$(EXE)
	$(RM) $(ETARG)$(EXE)
	$(RM) *.$O
	$(RM) core
	$(RM) objfmt.h
	$(RM) host.h
	$(RM) __coff__
	$(RM) __bout__
	$(RM) __elf__
	$(RM) *.rex		# for DOS, doesn't hurt anybody else
	$(RM) *.rf		# for DOS, doesn't hurt anybody else
	$(RM) hc.pro		# for DOS, doesn't hurt anybody else

#-----------------------------------------------------------------------------
# Target to uncomment host-specific lines in this makefile, i.e. lines
# beginning in column 1 with the following string:  #__<hostname>__# .
# Original Makefile is backed up as 'Makefile.old'.
#
# Invoke with:  make make HOST=xxx
#-----------------------------------------------------------------------------
make:
	-@grep -s "^#The next line was generated by 'make make'" Makefile; \
	if test $$? = 0 ; then	\
		echo "Makefile has already been processed with 'make make'";\
		exit 1; \
	elif test $(HOST)x = x ; then \
		echo 'Specify "make make HOST=???"'; \
		exit 1; \
	else \
		mv -f Makefile Makefile.old; \
		echo "#The next line was generated by 'make make'"> Makefile;\
		echo "HOST=$(HOST)"				 >> Makefile; \
		echo						 >> Makefile; \
		sed "s/^#__$(HOST)__#//" < Makefile.old		 >> Makefile; \
		if test $(HOST) = dos; then mv Makefile makefile; fi \
	fi
