#The next line was generated by 'mkmake'
HOST=i386_nbsd1

#-----------------------------------------------------------------------------
#                       Makefile for gdb960
#
# $Id: Makefile,v 1.68 1995/11/16 08:34:10 peters Exp $
#-----------------------------------------------------------------------------

#-----------------------------------------------------------------------------
# Copyright (C) 1989-1991 Free Software Foundation, Inc.
#
# This file is part of GDB.
#
# GDB is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 1, or (at your option)
# any later version.
#
# GDB is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with GDB; see the file COPYING.  If not, write to
# the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
#-----------------------------------------------------------------------------

# Essential under System V, harmless elsewhere
SHELL = /bin/sh

TARG	= gdb960
LDIR	= $(G960BASE)/lib
SRCDIR	= common
BINDIR	= $(HOST)

# gdb960 support libraries
BFD_SRC = ../../gdbbfd/$(SRCDIR)
BFD_CFLAGS = -I$(BFD_SRC)
BFD = $(LDIR)/gdbbfd.$A

LIBERTY_SRC = ../../liberty/$(SRCDIR)
LIBERTY_CFLAGS = -I$(LIBERTY_SRC)
LIBERTY = $(LDIR)/liberty.$A

READLINE_SRC = ../../readline/$(SRCDIR)
READLINE_CFLAGS = -I$(READLINE_SRC)
READLINE = $(LDIR)/readline.$A

HDI_SRC = ../../hdil/$(SRCDIR)
HDI_CFLAGS = -I$(HDI_SRC)
HDI = $(LDIR)/hdil.$A 

LIBDWARF_SRC = ../../libdwarf/$(SRCDIR)
LIBDWARF_CFLAGS = -I$(LIBDWARF_SRC)
LIBDWARF = $(LDIR)/libdwarf.$A

HDICOM_SRC = ../../hdilcomm/$(SRCDIR)
HDICOM = $(LDIR)/hdilcomm.$A

TOOLIB_SRC = ../../toolib/$(SRCDIR)
TOOLIB = $(LDIR)/toolib.$A

# ver960.h, gnudos.h, et al
GNU960_INC = ../../include
GNU960_CFLAGS = -I$(GNU960_INC)

# ALL_SRC is used for generating tags files
ALL_SRC = $(PWD) $(GNU960_INC) $(BFD_SRC) $(LIBERTY_SRC) $(READLINE_SRC) $(LIBDWARF_SRC) $(HDI_SRC) $(HDICOM_SRC) $(TOOLIB_SRC)

# Note: USER_CFLAGS is reserved for adding definitions from the command line.
USER_CFLAGS =

ALL_CFLAGS = $(OPT) -I. $(BFD_CFLAGS) $(HOST_CFLAGS) $(USER_CFLAGS) $(DEFINES) 

# For Unix: CFLAGS is the same as ALL_CFLAGS
# For DOS: CFLAGS is too long for the command line; make a response file.
CFLAGS	= $(ALL_CFLAGS)

#-----------  gdb configure stuff  ---------------
GDBVERSION = 4.13
TARGET_CANONICAL = i960-intel-hdi

#---------------------------------------------------------------------
#   DEFAULTS -- Override these as needed from the command line or 
#               in one of the host-specific sections.
#---------------------------------------------------------------------
O	= o
A	= a
RM	= rm -f
CP	= cp
LN	= ln -s
STRIP	= strip
YACC	= yacc
SED	= sed
NOLINK  = -c
OPT	= -g
IOPT	= -O
OUT	= -o
DEST	= $(G960BASE)/bin
TERMCAP	= -ltermcap

# Unix serial interface
SEROBJS	= ser-unix.o

# Compiler defines for ALL hosts
STDDEFS	= -DIMSTG -DNO_MMALLOC

# Compiler defines including host-specific
DEFINES = $(STDDEFS) $(HOSTDEFS)

LIBS    = $(BFD) $(READLINE) $(LIBERTY) $(LIBDWARF) $(HDI) $(HDICOM) $(TOOLIB)

#-----------------------------------------------------------------------------
#  Host-specific defines.
#  HOSTDEFS and TERMCAP are coming from, in the gdb distribution, 
#  gdb/config/$GENERALHOST/$PICKYHOST.mh files.  XM_H and HOST_CANONICAL 
#  come from finding your host in gdb/configure.in.  XM_DEP is the list of
#  header file dependencies from xm.h.
#-----------------------------------------------------------------------------
#		Uncomment for Intel 386 / System V Release 4
#__i386vr4__#XM_H	= xm-i386v4.h
#__i386vr4__#XM_DEP	= xm-i386v.h xm-sysv4.h
#__i386vr4__#HOST   	= i386vr4
#__i386vr4__#HOST_CANONICAL	= i486-intel-sysv4
#__i386vr4__#HOSTDEFS	= 
#__i386vr4__#TERMCAP	= -ltermlib
#-----------------------------------------------------------------------------
#		Uncomment for Sun 4 or Sparcstation / SunOS 4
#__sun4__#XM_H	= xm-sun4os4.h
#__sun4__#XM_DEP	= xm-sparc.h
#__sun4__#SEROBJS	= ser-unix.o ser-tcp.o
#__sun4__#HOST   	= sun4
#__sun4__#HOST_CANONICAL	= sparc-sun-sunos4.1.3
#__sun4__#HOSTDEFS	= 
#__sun4__#SERDEF	= -DSER_TCP
#__sun4__#LDFLAGS	= -Bstatic
#-----------------------------------------------------------------------------
#		Uncomment for i386_nbsd1
XM_H		= xm-i386.h
XM_DEP		= xm-i386-nbsd1.h
HOST		= i386_nbsd1
HOST_CANONICAL	= i386-intel-netbsd1.1
HOSTDEFS	= -DI386_NBSD1
TERMCAP		= -ltermcap
#-----------------------------------------------------------------------------
#		Uncomment for Solaris
#__sol-sun4__#XM_H	= xm-sun4sol2.h
#__sol-sun4__#XM_DEP	= xm-sparc.h xm-sysv4.h
#__sol-sun4__#HOST   	= sol-sun4
#__sol-sun4__#HOST_CANONICAL	= sparc-sun-solaris2.3
#__sol-sun4__#HOSTDEFS	= 
#__sol-sun4__#TERMCAP	= -ltermlib
#__sol-sun4__#LDFLAGS	= -ldl -Bstatic # NOTE: relative order is important
#-----------------------------------------------------------------------------
#		Uncomment for HP9000/700
#__hp700__#XM_H	= xm-hppah.h
#__hp700__#XM_DEP	= xm-pa.h 
#__hp700__#HOST   	= hp700
#__hp700__#HOST_CANONICAL	= hppa1.1-hp-hpux
#__hp700__#HOSTDEFS	= 
#__hp700__#SYSLIBS	= -ldvio
#__hp700__#TERMCAP	= -lcurses
#-----------------------------------------------------------------------------
#		Uncomment for HP9000/300
#__hp9000__#XM_H	= xm-hp300hpux.h
#__hp9000__#XM_DEP	= 
#__hp9000__#HOST   	= hp9000
#__hp9000__#HOST_CANONICAL	= m68k-hp-hpux
#__hp9000__#HOSTDEFS	= -D_CLASSIC_ANSI_TYPES
#__hp9000__#TERMCAP	= -ltermcap
#-----------------------------------------------------------------------------
#		Uncomment for IBM RS/6000 running AIX 3.[12]
#__rs6000__#XM_H	= xm-rs6000.h
#__rs6000__#XM_DEP	=
#__rs6000__#HOST   	= rs6000
#__rs6000__#HOST_CANONICAL	= rs6000-ibm-aix3.1
#__rs6000__#HOSTDEFS	= -qchars=signed
#__rs6000__#SYSLIBS	= -lm
#-----------------------------------------------------------------------------
#		Uncomment for MS/DOS
#  DOS is set up for Phar Lap 386|DOS-Extender 6.0 with Metaware 3.x compiler
#__dos__#XM_H		= xm-dos.h
#__dos__#XM_DEP		=
#__dos__#HOST   	= dos
#__dos__#HOST_CANONICAL	= i486-intel-dos
#__dos__#HOSTDEFS	= -DDOS -DNO_SYS_FILE -DNO_SYS_PARAM -Dfd_set=int
#__dos__#SEROBJS	= 
#__dos__#O		= obj
#__dos__#A		= lib
#__dos__#EXE		= .exe
#__dos__#EXP		= .exp
#__dos__#RM		= del
#__dos__#CP		= copy
#__dos__#LN		= copy
#__dos__#STRIP		= echo
#__dos__#OPT		= -g
#__dos__#IOPT		= -O3
#__dos__#OUT		= -e
#__dos__#GNU960INC	=$(GNU960_INC,/=\)
#__dos__#BFD_SRC	= ..\..\gdbbfd\dos
#__dos__#LIBERTY_SRC	= ..\..\liberty\dos
#__dos__#READLINE_SRC	= ..\..\readline\dos
#__dos__#HOST_CFLAGS	= -fsoft -Heol=10 -w1 -I$(GNU960INC)
#__dos__#CFLAGS		= @defines.rf
#__dos__#DEST		=$(G960BASE,/=\)\bin
#__dos__#TERMCAP	=
#__dos__#CC             = HC386
#__dos__##Set PHARDB to -fullsym for debugging with sb386, the Phar Lap debugger
#__dos__#PHARDB		= 
#__dos__#LDFLAGS	= "-stack 080000h" "-maxreal 0ffffh" -fsoft -twocase -nomap -nostub $(PHARDB)
#__dos__#DOSXP		= c:\tnt
#__dos__#DOSXB      = $(DOSXP)\bin
#__dos__#DOSXN		= $(DOSXB)\gotnt.exe
#__dos__#CFIG		= $(DOSXB)\cfig386
#__dos__#CFIGFLAGS	= -SAVEREGS -MAXVCPIMEM 0 -VMFILE VMMDRV.EXP
#-----------------------------------------------------------------------------
#		Uncomment for Windows 95
#  DOS is set up for Microsoft C 9.00 (Visual C++ 2.0)
#__win95__#XM_H		= xm-dos.h
#__win95__#XM_DEP		=
#__win95__#HOST		= win95
#__win95__#HOST_CANONICAL	= i486-intel-win95
#__win95__#HOSTDEFS	= -DWIN95 -DDOS -DNO_SYS_FILE -DNO_SYS_PARAM -Dfd_set=int -DMEM_FNS_DECLARED -DMALLOC_INCOMPATIBLE -DALMOST_STDC
#__win95__#SEROBJS		= 
#__win95__#O		= obj
#__win95__#A		= lib
#__win95__#EXE		= .exe
#__win95__#LN		= copy
#__win95__#STRIP		= echo
#__win95__#OPT		= -Zi
#__win95__#IOPT		= -O2
#__win95__#OUT		= -o
#__win95__#GNU960INC	= $(GNU960_INC,/=\)
#__win95__#BFD_SRC		= ..\..\gdbbfd\win95
#__win95__#LIBERTY_SRC	= ..\..\liberty\win95
#__win95__#READLINE_SRC	= ..\..\readline\win95
#__win95__#HOST_CFLAGS	= -W2 -I$(GNU960INC)
#__win95__#DEST		= $(G960BASE,/=\)\bin
#__win95__#TERMCAP		=
#__win95__#CC		= CL
#-----------------------------------------------------------------------------

YYOBJS = c-exp.$O

I960OBJS = d2x.$O d2xt.$O i960-dis.$O i960-pinsn.$O i960-tdep.$O remote-hdi.$O

BASEOBJS = annotate.$O blockframe.$O breakpoint.$O buildsym.$O \
	c-lang.$O c-typeprint.$O c-valprint.$O coffread.$O \
	command.$O complaints.$O copying.$O core.$O cp-valprint.$O \
	dbxread.$O demangle.$O dwarf2read.$O elfread.$O environ.$O \
	eval.$O exec.$O expprint.$O findvar.$O gdbtypes.$O infcmd.$O \
	inflow.$O infrun.$O init.$O language.$O main.$O  maint.$O \
	mem-break.$O minsyms.$O objfiles.$O parse.$O printcmd.$O \
	putenv.$O regex.$O serial.$O source.$O stabsread.$O stack.$O \
	symfile.$O symmisc.$O symtab.$O target.$O thread.$O top.$O \
	typeprint.$O utils.$O valarith.$O valops.$O valprint.$O \
	values.$O ver960.$O version.$O 

OBJS = $(YYOBJS) $(I960OBJS) $(SEROBJS) $(BASEOBJS)
OBJLIST	= $(OBJS) $(LIBS)
#__dos__#OBJLIST= @objs.rf
#__win95__#OBJLIST= @objs.rf

.c.$O: 
	$(CC) $(NOLINK) $(CFLAGS) $<

$(TARG): defines.rf objs.rf hc.pro $(OBJS)
	$(CC) $(OPT) $(OUT) $(TARG) $(LDFLAGS) $(OBJLIST) $(SYSLIBS) $(TERMCAP)
#__dos__#	copy /b $(DOSXN)+$(TARG)$(EXP) $(TARG)$(EXE)
#__dos__#	$(CFIG) $(TARG)$(EXE) $(CFIGFLAGS)

#-----------------------------------------------------------------------------
#  Special Cases (i.e. these do not use the .c.o rule)
#-----------------------------------------------------------------------------

#
# xm.h is a link to a host-specific header file
#
xm.h:
	$(RM) $@
	$(LN) $(XM_H) $@

# 
# utils.c and top.c need to find readline's include files
#
top.$O: top.c
	$(CC) $(NOLINK) $(CFLAGS) $(READLINE_CFLAGS) top.c

utils.$O: utils.c
	$(CC) $(NOLINK) $(CFLAGS) $(READLINE_CFLAGS) utils.c

# 
# remote-hdi.c and i960-tdep.c need to find hdil's include files
#
remote-hdi.$O: remote-hdi.c
	$(CC) $(NOLINK) $(CFLAGS) $(HDI_CFLAGS) remote-hdi.c

i960-tdep.$O: i960-tdep.c
	$(CC) $(NOLINK) $(CFLAGS) $(GNU960_CFLAGS) $(HDI_CFLAGS) i960-tdep.c

# 
# dwarf2read.c and elfread.c need to find standard GNU960 include files
#
dwarf2read.$O: dwarf2read.c
	$(CC) $(NOLINK) $(CFLAGS) $(GNU960_CFLAGS) dwarf2read.c

elfread.$O: elfread.c
	$(CC) $(NOLINK) $(CFLAGS) $(GNU960_CFLAGS) elfread.c

#
# init.o is ugly, but the alternative is to run "munch" every time
# you link, which is worse.
init.$O: init.c
	$(CC) $(NOLINK) $(CFLAGS) $(SERDEF) init.c

#
# DOS response files
#
defines.rf:
#__dos__#	$(RM) defines.rf
#__dos__#	echo $(ALL_CFLAGS) > defines.rf
#__win95__#	@echo

objs.rf:
#__dos__#	$(RM) objs.rf
#__dos__#	!foreach i $(OBJS) $(LIBS)
#__dos__#		echo $i >>objs.rf
#__dos__#	!end
#__win95__#	$(RM) objs.rf
#__win95__#	!foreach i $(OBJS) $(LIBS)
#__win95__#		echo $i >>objs.rf
#__win95__#	!end

#
# Metaware profile file
#
hc.pro:
#__dos__#	$(CP) $(GNU960INC)\sys\hc.pro hc.pro
#__win95__#	@echo

#
# Expression grammar
# Rebuild the .c's by hand if the .y's ever change.
#
update_grammar:
	$(RM) c-exp.c
	$(YACC) c-exp.y
	$(SED) -e '/extern.*malloc/d' \
	     -e '/extern.*realloc/d' \
	     -e '/extern.*free/d' \
	     -e '/include.*malloc.h/d' \
	     -e '/include.*values.h/d' \
	     -e 's/malloc/xmalloc/g' \
	     -e 's/realloc/xrealloc/g' < y.tab.c > c-exp.c
	$(RM) y.tab.c

#
# Builds tags for either emacs or vi.
# NOTE: Brain-damaged Opus Make is case insensitive; hence "vitags" not "tags".
#
TAGS:	FORCE
	make ALL_SRC="$(ALL_SRC)" ETAGS="etags -t" tagsfile

vitags:	FORCE
	make ALL_SRC="$(ALL_SRC)" ETAGS="ctags -wt" tagsfile

tagsfile:
	$(ETAGS) `(for dir in $(ALL_SRC) ; do echo $$dir/*.[ch] ; done)`

#-----------------------------------------------------------------------------
#   Header file dependencies
#-----------------------------------------------------------------------------
$(OBJS): defs.h xm.h $(XM_H) $(XM_DEP)
$(OBJS): tm-i960.h target.h ansidecl.h fopen-same.h
$(OBJS): $(BFD_SRC)/bfd.h
#__dos__#$(OBJS): fopen-bin.h

annotate.$O: annotate.c annotate.h value.h gdbtypes.h

blockframe.$O: blockframe.c gdbcore.h inferior.h objfiles.h symfile.h 

breakpoint.$O: breakpoint.c gdbcmd.h gdbcore.h inferior.h language.h thread.h

buildsym.$O: buildsym.c buildsym.h complaints.h objfiles.h symfile.h symtab.h

c-lang.$O: c-lang.c c-lang.h expression.h gdbtypes.h language.h parser-defs.h \
	symtab.h

c-typeprint.$O: c-typeprint.c c-lang.h expression.h gdbcmd.h gdbcore.h \
	gdbtypes.h language.h symtab.h typeprint.h value.h

c-valprint.$O: c-valprint.c expression.h gdbtypes.h language.h symtab.h \
	valprint.h value.h

coffread.$O: coffread.c breakpoint.h buildsym.h complaints.h expression.h \
	gdbtypes.h objfiles.h symfile.h symtab.h gdb-stabs.h stabsread.h

command.$O: command.c expression.h gdbcmd.h gdbtypes.h symtab.h value.h

complaints.$O: complaints.c complaints.h gdbcmd.h

core.$O: core.c dis-asm.h gdbcmd.h gdbcore.h inferior.h language.h

cp-valprint.$O: cp-valprint.c expression.h gdbcmd.h gdbtypes.h symtab.h \
	value.h

dbxread.$O: dbxread.c breakpoint.h buildsym.h command.h complaints.h \
	expression.h gdb-stabs.h gdbcore.h gdbtypes.h language.h objfiles.h \
	partial-stab.h stabsread.h symfile.h symtab.h 

demangle.$O: demangle.c gdbcmd.h

dwarf2read.$O: dwarf2read.c elf-dwarf.h $(GNU960_INC)/libdwarf.h buildsym.h \
	complaints.h expression.h gdbtypes.h language.h objfiles.h symfile.h \
	symtab.h

elfread.$O: elfread.c buildsym.h complaints.h gdb-stabs.h objfiles.h \
	symfile.h symtab.h $(GNU960_INC)/libdwarf.h

environ.$O: environ.c environ.h gdbcore.h

eval.$O: eval.c expression.h frame.h gdbtypes.h language.h symtab.h value.h

exec.$O: exec.c gdbcmd.h gdbcore.h inferior.h language.h

expprint.$O: expprint.c expression.h gdbtypes.h language.h parser-defs.h \
	symtab.h value.h

findvar.$O: findvar.c gdbcore.h inferior.h 

gdbtypes.$O: gdbtypes.c complaints.h expression.h gdbtypes.h language.h \
	objfiles.h symfile.h symtab.h value.h

i960-pinsn.$O: i960-pinsn.c dis-asm.h 

i960-tdep.$O: i960-tdep.c floatformat.h expression.h frame.h gdbtypes.h \
	symtab.h value.h $(HDI_SRC)/hdil.h

i960-dis.$O: dis-asm.h 

infcmd.$O: infcmd.c environ.h gdbcmd.h gdbcore.h inferior.h language.h

inflow.$O: inflow.c command.h inferior.h signals.h terminal.h thread.h

infrun.$O: infrun.c wait.h gdbcmd.h gdbcore.h inferior.h thread.h

language.$O: language.c expression.h frame.h gdbcmd.h gdbtypes.h language.h \
	parser-defs.h symtab.h value.h

main.$O: main.c top.h

maint.$O: maint.c gdbcmd.h gdbtypes.h symtab.h language.h expression.h

minsyms.$O: minsyms.c objfiles.h symfile.h symtab.h

objfiles.$O: objfiles.c objfiles.h symfile.h symtab.h

parse.$O: parse.c command.h expression.h frame.h gdbtypes.h language.h \
	parser-defs.h symtab.h value.h

printcmd.$O: printcmd.c breakpoint.h expression.h gdbcmd.h gdbcore.h \
	gdbtypes.h language.h objfiles.h symfile.h symtab.h 

regex.$O: regex.c regex.h 

remote-hdi.$O: breakpoint.h command.h demangle.h expression.h frame.h \
	gdbcmd.h gdbcore.h gdbtypes.h inferior.h symfile.h symtab.h \
	terminal.h value.h $(HDI_SRC)/hdil.h

ser-unix.$O: ser-unix.c serial.h 

serial.$O: serial.c serial.h 

source.$O: source.c expression.h frame.h gdbcmd.h gdbcore.h language.h \
	objfiles.h regex.h symfile.h symtab.h

stabsread.$O: stabsread.c aout-stab.def aout-stab_gnu.h buildsym.h \
	complaints.h gdbtypes.h objfiles.h stabsread.h symfile.h symtab.h

stack.$O: stack.c gdbcmd.h gdbcore.h inferior.h language.h 

symfile.$O: symfile.c breakpoint.h complaints.h expression.h gdbcmd.h \
	gdbcore.h gdbtypes.h language.h objfiles.h symfile.h symtab.h 

symmisc.$O: symmisc.c breakpoint.h command.h expression.h gdbtypes.h \
	language.h objfiles.h symfile.h symtab.h 

symtab.$O: symtab.c call-cmds.h expression.h frame.h gdbcmd.h gdbcore.h \
	gdbtypes.h language.h objfiles.h regex.h symfile.h symtab.h value.h

target.$O: target.c gdbcmd.h inferior.h objfiles.h symfile.h 

thread.$O: thread.c thread.h gdbcmd.h

top.$O: top.c top.h getopt.h call-cmds.h gdbcmd.h inferior.h language.h \
	signals.h $(READLINE_SRC)/readline.h $(READLINE_SRC)/history.h

typeprint.$O: typeprint.c expression.h gdbcmd.h gdbcore.h gdbtypes.h \
	language.h symtab.h value.h 

utils.$O: utils.c expression.h gdbcmd.h language.h signals.h terminal.h \
	$(READLINE_SRC)/readline.h

valarith.$O: valarith.c expression.h gdbtypes.h language.h symtab.h value.h

valops.$O: valops.c gdbcore.h inferior.h 

valprint.$O: valprint.c expression.h gdbcmd.h gdbcore.h gdbtypes.h \
	language.h symtab.h value.h

values.$O: values.c expression.h frame.h gdbcmd.h gdbcore.h gdbtypes.h \
	symtab.h value.h

#-----------------------------------------------------------------------------
#		'STANDARD' GNU/960 TARGETS BELOW THIS POINT
#-----------------------------------------------------------------------------

#
#   "version" refers to the gdb standard distribution version.
#   "ver960" refers to Intel's gdb960 version.
#
version.o: Makefile
	echo "char *version = \"$(GDBVERSION)\";" > version.c
	echo "char *host_name = \"$(HOST_CANONICAL)\";" >> version.c
	echo "char *target_name = \"$(TARGET_CANONICAL)\";" >> version.c
	$(CC) $(NOLINK) $(CFLAGS) version.c

# DOS version
version.obj: makefile
	echo char *version = "$(GDBVERSION)"; > version.c
	echo char *host_name = "$(HOST_CANONICAL)"; >> version.c
	echo char *target_name = "$(TARGET_CANONICAL)"; >> version.c
	$(CC) $(NOLINK) $(CFLAGS) version.c

ver960.o: FORCE
	echo  char gnu960_ver[]=	 		 > ver960.c
	echo "	\"$(TARG) `cat _version`, `date`\";"	>> ver960.c
	echo \#include \"ver960.h\"			>> ver960.c
	$(CC) $(NOLINK) $(CFLAGS) $(GNU960_CFLAGS) ver960.c

# DOS version
ver960.obj: FORCE
	echo char gnu960_ver[]=	 	 > ver960.c
	=$(LDIR)/verstr $(TARG)$(EXE) _version	>> ver960.c
	echo \#include "ver960.h"		>> ver960.c
	$(CC) $(NOLINK) $(CFLAGS) $(GNU960_CFLAGS) ver960.c

# Dummy target to force execution of dependent targets.
#
FORCE:

#
# The default make command for the install target
#
INST_MAKE = 	make $(TARG) LDIR=$(LDIR) OPT=$(IOPT) DOSXP=$(DOSXP) DOSXN=$(DOSXN)

install:
	$(INST_MAKE)
	-$(STRIP) $(TARG)$(EXE)
	(cd $(DEST); $(RM) $(TARG)$(EXE))
	$(CP) $(TARG)$(EXE) $(DEST)
#__dos__#	(cd $(DEST); $(RM) $(TARG)$(EXP))
#__dos__#	$(CP) $(TARG)$(EXP) $(DEST)

# 
# Separate lines required in order for DOS version to work
#
clean:
	$(RM) $(TARG)$(EXE)
	$(RM) *.$O
	$(RM) xm.h
	$(RM) core
	$(RM) version.c
	$(RM) ver960.c
	$(RM) *.rf		# for DOS, doesn't hurt anybody else
	$(RM) *.rex		# for DOS, doesn't hurt anybody else
	$(RM) *.exp		# for DOS, doesn't hurt anybody else
	$(RM) *.map		# for DOS, doesn't hurt anybody else
	$(RM) hc.pro		# for DOS, doesn't hurt anybody else

#-----------------------------------------------------------------------------
# Target to uncomment host-specific lines in this makefile, i.e. lines
# beginning in column 1 with the following string:  #__<hostname>__# .
# Original Makefile is backed up as 'Makefile.old'.
#
# Invoke with:  make make HOST=xxx
#-----------------------------------------------------------------------------
make:
	-@grep -s "^#The next line was generated by 'make make'" Makefile; \
	if test $$? = 0 ; then	\
		echo "Makefile has already been processed with 'make make'";\
		exit 1; \
	elif test $(HOST)x = x ; then \
		echo 'Specify "make make HOST=???"'; \
		exit 1; \
	else \
		mv -f Makefile Makefile.old; \
		echo "#The next line was generated by 'make make'"> Makefile;\
		echo "HOST=$(HOST)"				 >> Makefile; \
		echo						 >> Makefile; \
		sed "s/^#__$(HOST)__#//" < Makefile.old		 >> Makefile; \
		if test $(HOST) = dos; then mv Makefile makefile; fi \
	fi
