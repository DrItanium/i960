#ifndef I960_ARITHMETIC_CONTROLS_H__
#define I960_ARITHMETIC_CONTROLS_H__
#include "types.h"
namespace i960 {
    union ArithmeticControls {
        struct {
            Ordinal conditionCode : 3;
			Ordinal reserved0 : 5;
            /**
             * Denotes an integer overflow happened
             */
            Ordinal integerOverflowFlag : 1;
            /**
             * Reserved, bind to zero always
             */
            Ordinal reserved1 : 3;
            /**
             * Inhibit the processor from invoking a fault handler
             * when integer overflow is detected.
             */
            Ordinal integerOverflowMask : 1;
            /**
             * Reserved, always bind to zero
             */
            Ordinal reserved2 : 2;
            /**
             * Disable faults generated by imprecise results being generated
             */
            Ordinal noImpreciseFaults : 1;
			Ordinal reserved3 : 16;
        };
        Ordinal value;
        void clear() noexcept;
        Ordinal modify(Ordinal mask, Ordinal value) noexcept;
        constexpr ArithmeticControls(Ordinal rawValue = 0) noexcept : value(rawValue) { }
        ~ArithmeticControls(); 

        // NOTE that both of these methods could return true in some cases
        // I think that the safest solution is to actually raise a fault if both
        // are true or both are false.

		template<Ordinal mask>
		constexpr bool conditionCodeIs() const noexcept {
			return conditionCode == mask;
		}
		template<Ordinal mask>
		constexpr bool conditionCodeBitSet() const noexcept {
			return (conditionCode & mask) != 0;
		}
		constexpr bool shouldCarryOut() const noexcept {
			// 0b01X where X is don't care
			return conditionCode == 0b010 || conditionCode == 0b011;
		}
		constexpr bool markedAsOverflow() const noexcept {
			// 0b0X1 where X is don't care
			return conditionCode == 0b001 || conditionCode == 0b011;
		}
        constexpr Ordinal getConditionCode() const noexcept {
            return conditionCode;
        }
        constexpr bool carrySet() const noexcept {
            return (conditionCode & 0b010) != 0;
        }
        constexpr Ordinal getCarryValue() const noexcept {
            return carrySet() ? 1 : 0;
        }
    } __attribute__((packed));

} // end namespace i960
#endif // end I960_ARITHMETIC_CONTROLS_H__
