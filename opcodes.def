#define flag(name, flagTitle)
#define compareOperation(name) flag(name, IsCompareOperation)
#define arithmeticOperation(name) flag(name, IsArithmeticOperation)
#define creg(baseName, baseAddress, arg) \
		reg(baseName ## e, (baseAddress | 0x0a0), arg) \
        compareOperation(baseName ## e) \
		reg(baseName ## g, (baseAddress | 0x090), arg) \
        compareOperation(baseName ## g) \
		reg(baseName ## ge, (baseAddress | 0x0b0), arg) \
        compareOperation(baseName ## ge) \
		reg(baseName ## l, (baseAddress | 0x0c0), arg) \
        compareOperation(baseName ## l) \
		reg(baseName ## le, (baseAddress | 0x0e0), arg) \
        compareOperation(baseName ## le) \
		reg(baseName ## ne, (baseAddress | 0x0d0), arg) \
        compareOperation(baseName ## ne) \
		reg(baseName ## no, (baseAddress | 0x080), arg) \
        compareOperation(baseName ## no) \
		reg(baseName ## o, (baseAddress | 0x0f0), arg) \
        compareOperation(baseName ## o)
#define cregFlag(baseName, flagTitle) \
        flag(baseName ## e, flagTitle) \
        flag(baseName ## g, flagTitle) \
        flag(baseName ## ge, flagTitle) \
        flag(baseName ## l, flagTitle) \
        flag(baseName ## le, flagTitle) \
        flag(baseName ## ne, flagTitle) \
        flag(baseName ## no, flagTitle) \
        flag(baseName ## o, flagTitle)
        
reg(addi, 0x591, RegLit_RegLit_Reg)
flag(addi, IsAddOperation)
arithmeticOperation(addi)
flag(addi, IsIntegerOperation)
reg(addo, 0x590, RegLit_RegLit_Reg)
flag(addo, IsAddOperation)
arithmeticOperation(addo)
flag(addo, IsOrdinalOperation)
reg(addc, 0x5b0, RegLit_RegLit_Reg)
flag(addc, IsAddOperation)
arithmeticOperation(addc)
creg(addo, 0x700, RegLit_RegLit_Reg)
cregFlag(addo, IsAddOperation)
cregFlag(addo, IsArithmeticOperation)
cregFlag(addo, IsOrdinalOperation)
creg(addi, 0x701, RegLit_RegLit_Reg)
cregFlag(addi, IsAddOperation)
cregFlag(addi, IsArithmeticOperation)
cregFlag(addi, IsIntegerOperation)


// compare operations
reg(concmpo, 0x5a2, RegLit_RegLit)
compareOperation(concmpo)
flag(concmpo, IsOrdinalOperation)
reg(concmpi, 0x5a3, RegLit_RegLit)
compareOperation(concmpi)
flag(concmpi, IsIntegerOperation)
reg(cmpob, 0x594, RegLit_RegLit)
compareOperation(cmpob)
flag(cmpob, IsOrdinalOperation)
reg(cmpib, 0x595, RegLit_RegLit)
compareOperation(cmpib)
flag(cmpib, IsIntegerOperation)
reg(cmpos, 0x596, RegLit_RegLit)
compareOperation(cmpos)
flag(cmpos, IsOrdinalOperation)
reg(cmpis, 0x597, RegLit_RegLit)
compareOperation(cmpis)
flag(cmpis, IsIntegerOperation)
reg(cmpo,  0x5a0, RegLit_RegLit)
compareOperation(cmpo)
flag(cmpo, IsOrdinalOperation)
reg(cmpi,  0x5a1, RegLit_RegLit)
flag(cmpi, IsIntegerOperation)
compareOperation(cmpi)
reg(cmpinci, 0x5a5, RegLit_RegLit_Reg)
compareOperation(cmpinci)
flag(cmpinci, IsIntegerOperation)
reg(cmpinco, 0x5a4, RegLit_RegLit_Reg)
compareOperation(cmpinco)
flag(cmpinco, IsOrdinalOperation)
reg(cmpdeco, 0x5a6, RegLit_RegLit_Reg)
compareOperation(cmpdeco)
flag(cmpdeco, IsOrdinalOperation)
reg(cmpdeci, 0x5a7, RegLit_RegLit_Reg)
compareOperation(cmpdeci)
flag(cmpdeci, IsIntegerOperation)

reg(eshro, 0x5D8, RegLit_RegLit_Reg) // extended shift right ordinal
arithmeticOperation(eshro)
flag(eshro, IsOrdinalOperation)
reg(divo, 0x70b, RegLit_RegLit_Reg)
arithmeticOperation(divo)
flag(divo, IsOrdinalOperation)
reg(divi, 0x74b, RegLit_RegLit_Reg)
arithmeticOperation(divi)
flag(divi, IsIntegerOperation)

reg(emul, 0x670, RegLit_RegLit_Reg)
arithmeticOperation(emul)
reg(ediv, 0x671, RegLit_RegLit_Reg)
arithmeticOperation(ediv)

reg(mulo, 0x701, RegLit_RegLit_Reg)
arithmeticOperation(mulo)
flag(mulo, IsOrdinalOperation)
reg(remo, 0x708, RegLit_RegLit_Reg)
arithmeticOperation(remo)
flag(remo, IsOrdinalOperation)
reg(muli, 0x741, RegLit_RegLit_Reg)
arithmeticOperation(muli)
flag(muli, IsIntegerOperation)
reg(remi, 0x748, RegLit_RegLit_Reg)
arithmeticOperation(remo)
flag(remi, IsIntegerOperation)

reg(shro,  0x598, RegLit_RegLit_Reg)
arithmeticOperation(shro)
flag(shro, IsOrdinalOperation)
reg(shrdi, 0x59a, RegLit_RegLit_Reg)
arithmeticOperation(shrdi)
flag(shrdi, IsIntegerOperation)
reg(shri,  0x59b, RegLit_RegLit_Reg)
arithmeticOperation(shri)
flag(shri, IsIntegerOperation)
reg(shlo,  0x59c, RegLit_RegLit_Reg)
arithmeticOperation(shlo)
flag(shlo, IsOrdinalOperation)
reg(rotate, 0x59d, RegLit_RegLit_Reg)
arithmeticOperation(rotate)
reg(shli,  0x59e, RegLit_RegLit_Reg)
flag(shli, IsIntegerOperation)
arithmeticOperation(shli)

reg(subc, 0x5b2, RegLit_RegLit_Reg)
arithmeticOperation(subc)
reg(subi, 0x593, RegLit_RegLit_Reg)
arithmeticOperation(subi)
flag(subi, IsIntegerOperation)
flag(subi, IsSubtractOperation)
creg(subi, 0x703, RegLit_RegLit_Reg)
cregFlag(subi, IsSubtractOperation)
cregFlag(subi, IsArithmeticOperation)
cregFlag(subi, IsIntegerOperation)
reg(subo, 0x592, RegLit_RegLit_Reg)
arithmeticOperation(subo)
flag(subo, IsOrdinalOperation)
flag(subo, IsSubtractOperation)
creg(subo, 0x702, RegLit_RegLit_Reg)
cregFlag(subo, IsSubtractOperation)
cregFlag(subo, IsArithmeticOperation)
cregFlag(subo, IsOrdinalOperation)


reg(opand, 0x581, RegLit_RegLit_Reg )
flag(opand, IsBitwiseLogicalOperation)
reg(andnot, 0x582, RegLit_RegLit_Reg)
flag(andnot, IsBitwiseLogicalOperation)
reg(nand, 0x58e, RegLit_RegLit_Reg)
flag(nand, IsBitwiseLogicalOperation)
reg(nor, 0x588, RegLit_RegLit_Reg)
flag(nor, IsBitwiseLogicalOperation)
reg(opnot, 0x58a, RegLit_Reg)
flag(opnot, IsBitwiseLogicalOperation)
reg(notand, 0x584, RegLit_RegLit_Reg)
flag(notand, IsBitwiseLogicalOperation)
reg(notor, 0x58d, RegLit_RegLit_Reg)
flag(notor, IsBitwiseLogicalOperation)
reg(opor, 0x587, RegLit_RegLit_Reg)
flag(notor, IsBitwiseLogicalOperation)
reg(ornot, 0x58b, RegLit_RegLit_Reg)
flag(ornot, IsBitwiseLogicalOperation)
reg(xnor, 0x589, RegLit_RegLit_Reg)
flag(xnor, IsBitwiseLogicalOperation)
reg(opxor, 0x586, RegLit_RegLit_Reg)
flag(opxor, IsBitwiseLogicalOperation)

reg(modi, 0x749, RegLit_RegLit_Reg)
flag(modi, IsIntegerOperation)
flag(modi, IsArithmeticOperation)

reg(modify, 0x650, RegLit_RegLit_Reg)
reg(notbit, 0x580, RegLit_RegLit_Reg)
reg(alterbit, 0x58f, RegLit_RegLit_Reg)
reg(chkbit, 0x5ae, RegLit_RegLit)
reg(clrbit, 0x58c, RegLit_RegLit_Reg)
reg(extract, 0x651, RegLit_RegLit_Reg)

reg(atadd, 0x612, RegLit_RegLit_Reg)
reg(atmod, 0x610, RegLit_RegLit_Reg)

reg(bswap, 0x5ad, RegLit_Reg)
reg(calls, 0x660, RegLit)
reg(dcctl, 0x65c, RegLit_Reg)
reg(flushreg, 0x66d, None)
reg(fmark, 0x66c, None)
reg(halt, 0x65d, RegLit)
reg(icctl, 0x65b, RegLit_RegLit_Reg) // instruction cache control
reg(intctl, 0x658, RegLit_Reg) // interrupt global enable and disable
reg(intdis, 0x5b4, None) // global interrupt disable
reg(inten, 0x5b5, None) // global interrupt enable
reg(mark, 0x66b, None)
reg(modac, 0x645, RegLit_RegLit_Reg)
reg(modpc, 0x655, RegLit_RegLit_Reg)
reg(modtc, 0x654, RegLit_RegLit_Reg)

reg(mov,  0x5cc, RegLit_Reg)
reg(movl, 0x5dc, RegLit_Reg) 
reg(movq, 0x5fc, RegLit_Reg)
reg(movt, 0x5ec, RegLit_Reg)

reg(scanbit, 0x641, RegLit_Reg)
reg(scanbyte, 0x5ac, RegLit_RegLit)

creg(sel, 0x704, RegLit_RegLit_Reg) // select based on ...
reg(setbit, 0x583, RegLit_RegLit_Reg)
reg(spanbit, 0x640, RegLit_Reg)
reg(syncf, 0x66f, None)
reg(sysctl, 0x659, RegLit_RegLit_Reg)
// BEGIN MEM INSTRUCTIONS
mem(bx,    (0x84 << 4), Mem)
mem(balx,  (0x85 << 4), Mem_Reg)
mem(callx, (0x86 << 4), Mem)
mem(ld,    (0x90 << 4), Mem_Reg)
mem(lda,   (0x8c << 4), Mem_Reg)
mem(ldib,  (0xc0 << 4), Mem_Reg)
mem(ldis,  (0xc8 << 4), Mem_Reg)
mem(ldl,   (0x98 << 4), Mem_Reg)
mem(ldob,  (0x80 << 4), Mem_Reg)
mem(ldos,  (0x88 << 4), Mem_Reg)
mem(ldq,   (0xb0 << 4), Mem_Reg)
mem(ldt,   (0xa0 << 4), Mem_Reg)
mem(st,    (0x92 << 4), Reg_Mem)
mem(stib,  (0xc2 << 4), Reg_Mem)
mem(stis,  (0xcA << 4), Reg_Mem)
mem(stl,   (0x9a << 4), Reg_Mem)
mem(stob,  (0x82 << 4), Reg_Mem)
mem(stos,  (0x8a << 4), Reg_Mem)
mem(stt,   (0xa2 << 4), Reg_Mem)
mem(stq,   (0xb2 << 4), Reg_Mem)
// BEGIN COBR INSTRUCTIONS
cobr(teste,   (0x22 << 4), Reg)
cobr(testg,   (0x21 << 4), Reg)
cobr(testge,  (0x23 << 4), Reg)
cobr(testl,   (0x24 << 4), Reg)
cobr(testle,  (0x26 << 4), Reg)
cobr(testne,  (0x25 << 4), Reg)
cobr(testno,  (0x20 << 4), Reg)
cobr(testo,   (0x27 << 4), Reg)
cobr(bbc,     (0x30 << 4), RegLit_Reg_Disp)
cobr(cmpobg,  (0x31 << 4), RegLit_Reg_Disp)
cobr(cmpobe,  (0x32 << 4), RegLit_Reg_Disp)
cobr(cmpobge, (0x33 << 4), RegLit_Reg_Disp)
cobr(cmpobl,  (0x34 << 4), RegLit_Reg_Disp)
cobr(cmpobne, (0x35 << 4), RegLit_Reg_Disp)
cobr(cmpoble, (0x36 << 4), RegLit_Reg_Disp)
cobr(bbs,     (0x37 << 4), RegLit_Reg_Disp)
cobr(cmpibno, (0x38 << 4), RegLit_Reg_Disp)
cobr(cmpibg,  (0x39 << 4), RegLit_Reg_Disp)
cobr(cmpibe,  (0x3a << 4), RegLit_Reg_Disp)
cobr(cmpibge, (0x3b << 4), RegLit_Reg_Disp)
cobr(cmpibl,  (0x3c << 4), RegLit_Reg_Disp)
cobr(cmpibne, (0x3d << 4), RegLit_Reg_Disp)
cobr(cmpible, (0x3e << 4), RegLit_Reg_Disp)
cobr(cmpibo,  (0x3f << 4), RegLit_Reg_Disp)
// BEGIN CTRL INSTRUCTIONS
ctrl(b,       (0x08 << 4), Disp)
ctrl(call,    (0x09 << 4), Disp)
ctrl(ret,     (0x0a << 4), None)
ctrl(bal,     (0x0b << 4), Disp)
ctrl(bno,     (0x10 << 4), Disp)
ctrl(bg,      (0x11 << 4), Disp)
ctrl(be,      (0x12 << 4), Disp)
ctrl(bge,     (0x13 << 4), Disp)
ctrl(bl,      (0x14 << 4), Disp)
ctrl(ble,     (0x16 << 4), Disp)
ctrl(bne,     (0x15 << 4), Disp)
ctrl(bo,      (0x17 << 4), Disp)
ctrl(faultno, (0x18 << 4), None)
ctrl(faultg,  (0x19 << 4), None)
ctrl(faulte,  (0x1a << 4), None)
ctrl(faultge, (0x1b << 4), None)
ctrl(faultl,  (0x1c << 4), None)
ctrl(faultle, (0x1e << 4), None)
ctrl(faultne, (0x1d << 4), None)
ctrl(faulto,  (0x1f << 4), None)
#undef creg
#undef compareOperation
#undef cregFlag
