
    reg(notbit, 0x580, RegLit_RegLit_Reg)
    reg(opand, 0x581, RegLit_RegLit_Reg )
    reg(andnot, 0x582, RegLit_RegLit_Reg)
    reg(setbit, 0x583, RegLit_RegLit_Reg)
    reg(notand, 0x584, RegLit_RegLit_Reg)
    reg(opxor, 0x586, RegLit_RegLit_Reg)
    reg(opor, 0x587, RegLit_RegLit_Reg)
    reg(nor, 0x588, RegLit_RegLit_Reg)
    reg(xnor, 0x589, RegLit_RegLit_Reg)
    reg(opnot, 0x58a, RegLit_Reg)
    reg(ornot, 0x58b, RegLit_RegLit_Reg)
    reg(clrbit, 0x58c, RegLit_RegLit_Reg)
    reg(notor, 0x58d, RegLit_RegLit_Reg)
    reg(nand, 0x58e, RegLit_RegLit_Reg)
    reg(alterbit, 0x58f, RegLit_RegLit_Reg)

    reg(addo, 0x590, RegLit_RegLit_Reg)
    reg(addi, 0x591, RegLit_RegLit_Reg)
    reg(subo, 0x592, RegLit_RegLit_Reg)
    reg(subi, 0x593, RegLit_RegLit_Reg)
    reg(cmpob, 0x594, RegLit_RegLit)
    reg(cmpib, 0x595, RegLit_RegLit)
    reg(cmpos, 0x596, RegLit_RegLit)
    reg(cmpis, 0x597, RegLit_RegLit)
    reg(shro,  0x598, RegLit_RegLit_Reg)
    reg(shrdi, 0x59a, RegLit_RegLit_Reg)
    reg(shri,  0x59b, RegLit_RegLit_Reg)
    reg(shlo,  0x59c, RegLit_RegLit_Reg)
    reg(rotate, 0x59d, RegLit_RegLit_Reg)
    reg(shli,  0x59e, RegLit_RegLit_Reg)

    reg(cmpo, 0x5a0, RegLit_RegLit)
    reg(cmpi, 0x5a1, RegLit_RegLit)
    reg(concmpo, 0x5a2, RegLit_RegLit)
    reg(concmpi, 0x5a3, RegLit_RegLit)
    reg(cmpinco, 0x5a4, RegLit_RegLit_Reg)
    reg(cmpinci, 0x5a5, RegLit_RegLit_Reg)
    reg(cmpdeco, 0x5a6, RegLit_RegLit_Reg)
    reg(cmpdeci, 0x5a7, RegLit_RegLit_Reg)
    reg(scanbyte, 0x5ac, RegLit_RegLit)
#ifdef I960JX_ENABLED__
    reg(bswap, 0x5ad, RegLit_Reg)
#endif
    reg(chkbit, 0x5ae, RegLit_RegLit)

    reg(addc, 0x5b0, RegLit_RegLit_Reg)
    reg(subc, 0x5b2, RegLit_RegLit_Reg)
#ifdef I960JX_ENABLED__
    reg(intdis, 0x5b4, None) // global interrupt disable
    reg(inten, 0x5b5, None) // global interrupt enable
#endif

    reg(mov,  0x5cc, RegLit_Reg)

    reg(eshro, 0x5d8, RegLit_RegLit_Reg) // extended shift right ordinal
    reg(movl, 0x5dc, RegLit_Reg)

    reg(movt, 0x5ec, RegLit_Reg)

    reg(movq, 0x5fc, RegLit_Reg)
    reg(synmov, 0x600, RegLit_RegLit)
    reg(synmovl, 0x601, RegLit_RegLit)
    reg(synmovq, 0x602, RegLit_RegLit)
    reg(atmod, 0x610, RegLit_RegLit_Reg)
    reg(atadd, 0x612, RegLit_RegLit_Reg)
    reg(synld, 0x615, RegLit_Reg)

    reg(spanbit, 0x640, RegLit_Reg)
    reg(scanbit, 0x641, RegLit_Reg)
    reg(daddc, 0x642, RegLit_RegLit_Reg) // reg reg reg form actually
    reg(dsubc, 0x643, RegLit_RegLit_Reg) // reg reg reg form actually
    reg(dmovt, 0x644, RegLit_Reg) // reg reg form actually
    reg(modac, 0x645, RegLit_RegLit_Reg)

    reg(modify, 0x650, RegLit_RegLit_Reg)
    reg(extract, 0x651, RegLit_RegLit_Reg)
    reg(modtc, 0x654, RegLit_RegLit_Reg)
    reg(modpc, 0x655, RegLit_RegLit_Reg)
#ifdef I960JX_ENABLED__
    reg(intctl, 0x658, RegLit_Reg) // interrupt global enable and disable
    reg(sysctl, 0x659, RegLit_RegLit_Reg)
    reg(icctl, 0x65b, RegLit_RegLit_Reg) // instruction cache control
    reg(dcctl, 0x65c, RegLit_Reg)
    reg(halt, 0x65d, RegLit)
#endif

    reg(calls, 0x660, RegLit)
    reg(mark, 0x66b, None)
    reg(fmark, 0x66c, None)
    reg(flushreg, 0x66d, None)
    reg(syncf, 0x66f, None)

    reg(emul, 0x670, RegLit_RegLit_Reg)
    reg(ediv, 0x671, RegLit_RegLit_Reg)
    reg(cvtir, 0x674, RegLit_RegLit)
    reg(cvtilr, 0x675, RegLit_RegLit)
    reg(scalerl, 0x676, RegLit_RegLit_Reg)
    reg(scaler, 0x677, RegLit_RegLit_Reg)

    reg(atanr, 0x680, RegLit_RegLit_Reg)
    reg(logepr, 0x681, RegLit_RegLit_Reg)
    reg(logr, 0x682, RegLit_RegLit_Reg)
    reg(remr, 0x683, RegLit_RegLit_Reg)
    reg(cmpr, 0x684, RegLit_RegLit)
    reg(cmpor, 0x685, RegLit_RegLit)
    reg(sqrtr, 0x688, RegLit_Reg)
    reg(expr, 0x689, RegLit_Reg)
    reg(logbnr, 0x68a, RegLit_Reg)
    reg(roundr, 0x68b, RegLit_Reg)
    reg(sinr, 0x68c, RegLit_Reg)
    reg(cosr, 0x68d, RegLit_Reg)
    reg(tanr, 0x68e, RegLit_Reg)
    reg(classr, 0x68f, RegLit)

    reg(atanrl, 0x690, RegLit_RegLit_Reg)
    reg(logeprl, 0x691, RegLit_RegLit_Reg)
    reg(logrl, 0x692, RegLit_RegLit_Reg)
    reg(remrl, 0x693, RegLit_RegLit_Reg)
    reg(cmprl, 0x694, RegLit_RegLit)
    reg(cmporl, 0x695, RegLit_RegLit)
    reg(sqrtrl, 0x698, RegLit_Reg)
    reg(exprl, 0x699, RegLit_Reg)
    reg(logbnrl, 0x69a, RegLit_Reg)
    reg(roundrl, 0x69b, RegLit_Reg)
    reg(sinrl, 0x69c, RegLit_Reg)
    reg(cosrl, 0x69d, RegLit_Reg)
    reg(tanrl, 0x69e, RegLit_Reg)
    reg(classrl, 0x69f, RegLit)


    reg(cvtri, 0x6C0, RegLit_RegLit)
    reg(cvtril, 0x6C1, RegLit_RegLit)
    reg(cvtzri, 0x6C2, RegLit_RegLit)
    reg(cvtzril, 0x6C3, RegLit_RegLit)
    reg(movr, 0x6C9, RegLit_Reg)

    reg(movrl, 0x6D9, RegLit_Reg)

    reg(movre, 0x6E1, RegLit_Reg)
    reg(cpyrsre, 0x6E2, RegLit_RegLit_Reg)
    reg(cpysre, 0x6E3, RegLit_RegLit_Reg)

#ifdef I960JX_ENABLED__
    #define ConditionalRegisterBlock(baseName, baseAddress, arg) \
		reg(baseName ## e, (baseAddress | 0x0a0), arg) \
		reg(baseName ## g, (baseAddress | 0x090), arg) \
		reg(baseName ## ge, (baseAddress | 0x0b0), arg) \
		reg(baseName ## l, (baseAddress | 0x0c0), arg) \
		reg(baseName ## le, (baseAddress | 0x0e0), arg) \
		reg(baseName ## ne, (baseAddress | 0x0d0), arg) \
		reg(baseName ## no, (baseAddress | 0x080), arg) \
		reg(baseName ## o, (baseAddress | 0x0f0), arg)
    ConditionalRegisterBlock(addo, 0x700, RegLit_RegLit_Reg)
    ConditionalRegisterBlock(addi, 0x701, RegLit_RegLit_Reg)
    ConditionalRegisterBlock(subo, 0x702, RegLit_RegLit_Reg)
    ConditionalRegisterBlock(subi, 0x703, RegLit_RegLit_Reg)
    ConditionalRegisterBlock(sel, 0x704, RegLit_RegLit_Reg) // select based on ...
#endif
    reg(mulo, 0x701, RegLit_RegLit_Reg)
    reg(remo, 0x708, RegLit_RegLit_Reg)
    reg(divo, 0x70b, RegLit_RegLit_Reg)

    reg(muli, 0x741, RegLit_RegLit_Reg)
    reg(remi, 0x748, RegLit_RegLit_Reg)
    reg(modi, 0x749, RegLit_RegLit_Reg)
    reg(divi, 0x74b, RegLit_RegLit_Reg)

    reg(divr, 0x78b, RegLit_RegLit_Reg)
    reg(mulr, 0x78c, RegLit_RegLit_Reg)
    reg(subr, 0x78d, RegLit_RegLit_Reg)
    reg(addr, 0x78f, RegLit_RegLit_Reg)

    reg(divrl, 0x79b, RegLit_RegLit_Reg)
    reg(mulrl, 0x79c, RegLit_RegLit_Reg)
    reg(subrl, 0x79d, RegLit_RegLit_Reg)
    reg(addrl, 0x79f, RegLit_RegLit_Reg)
// BEGIN MEM INSTRUCTIONS
    mem(bx,    (0x84 << 4), Mem)
    mem(balx,  (0x85 << 4), Mem_Reg)
    mem(callx, (0x86 << 4), Mem)
    mem(ld,    (0x90 << 4), Mem_Reg)
    mem(lda,   (0x8c << 4), Mem_Reg)
    mem(ldib,  (0xc0 << 4), Mem_Reg)
    mem(ldis,  (0xc8 << 4), Mem_Reg)
    mem(ldl,   (0x98 << 4), Mem_Reg)
    mem(ldob,  (0x80 << 4), Mem_Reg)
    mem(ldos,  (0x88 << 4), Mem_Reg)
    mem(ldq,   (0xb0 << 4), Mem_Reg)
    mem(ldt,   (0xa0 << 4), Mem_Reg)
    mem(st,    (0x92 << 4), Reg_Mem)
    mem(stib,  (0xc2 << 4), Reg_Mem)
    mem(stis,  (0xcA << 4), Reg_Mem)
    mem(stl,   (0x9a << 4), Reg_Mem)
    mem(stob,  (0x82 << 4), Reg_Mem)
    mem(stos,  (0x8a << 4), Reg_Mem)
    mem(stt,   (0xa2 << 4), Reg_Mem)
    mem(stq,   (0xb2 << 4), Reg_Mem)
// BEGIN COBR INSTRUCTIONS
    cobr(teste,   (0x22 << 4), Reg)
    cobr(testg,   (0x21 << 4), Reg)
    cobr(testge,  (0x23 << 4), Reg)
    cobr(testl,   (0x24 << 4), Reg)
    cobr(testle,  (0x26 << 4), Reg)
    cobr(testne,  (0x25 << 4), Reg)
    cobr(testno,  (0x20 << 4), Reg)
    cobr(testo,   (0x27 << 4), Reg)
    cobr(bbc,     (0x30 << 4), RegLit_Reg_Disp)
    cobr(cmpobg,  (0x31 << 4), RegLit_Reg_Disp)
    cobr(cmpobe,  (0x32 << 4), RegLit_Reg_Disp)
    cobr(cmpobge, (0x33 << 4), RegLit_Reg_Disp)
    cobr(cmpobl,  (0x34 << 4), RegLit_Reg_Disp)
    cobr(cmpobne, (0x35 << 4), RegLit_Reg_Disp)
    cobr(cmpoble, (0x36 << 4), RegLit_Reg_Disp)
    cobr(bbs,     (0x37 << 4), RegLit_Reg_Disp)
    cobr(cmpibno, (0x38 << 4), RegLit_Reg_Disp)
    cobr(cmpibg,  (0x39 << 4), RegLit_Reg_Disp)
    cobr(cmpibe,  (0x3a << 4), RegLit_Reg_Disp)
    cobr(cmpibge, (0x3b << 4), RegLit_Reg_Disp)
    cobr(cmpibl,  (0x3c << 4), RegLit_Reg_Disp)
    cobr(cmpibne, (0x3d << 4), RegLit_Reg_Disp)
    cobr(cmpible, (0x3e << 4), RegLit_Reg_Disp)
    cobr(cmpibo,  (0x3f << 4), RegLit_Reg_Disp)
// BEGIN CTRL INSTRUCTIONS
    ctrl(b,       (0x08 << 4), Disp)
    ctrl(call,    (0x09 << 4), Disp)
    ctrl(ret,     (0x0a << 4), None)
    ctrl(bal,     (0x0b << 4), Disp)
    ctrl(bno,     (0x10 << 4), Disp)
    ctrl(bg,      (0x11 << 4), Disp)
    ctrl(be,      (0x12 << 4), Disp)
    ctrl(bge,     (0x13 << 4), Disp)
    ctrl(bl,      (0x14 << 4), Disp)
    ctrl(ble,     (0x16 << 4), Disp)
    ctrl(bne,     (0x15 << 4), Disp)
    ctrl(bo,      (0x17 << 4), Disp)
    ctrl(faultno, (0x18 << 4), None)
    ctrl(faultg,  (0x19 << 4), None)
    ctrl(faulte,  (0x1a << 4), None)
    ctrl(faultge, (0x1b << 4), None)
    ctrl(faultl,  (0x1c << 4), None)
    ctrl(faultle, (0x1e << 4), None)
    ctrl(faultne, (0x1d << 4), None)
    ctrl(faulto,  (0x1f << 4), None)
#undef ConditionalRegisterBlock
